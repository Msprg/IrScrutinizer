<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Arduino/Infrared4Arduino" extension="ino" multiSignal="true" simpleSequence="false">

    <exportformats:documentation>
        <div>This export format generates an <a href="https://www.arduino.cc/">Arduino</a> sketch file (.ino).
        using the Arduino IR library <a href="https://github.com/bengtmartensson/Infrared4Arduino">Infrared4Arduino</a>
        (see also <a href="http://www.harctoolbox.org/Infrared4Arduino.html">this</a>).</div>
        <div>If the signals uses a protocol directly supported by Infrared4Arduino (presently NEC1 and RC5),
            the parametrized form is used, otherwise the raw form.
        </div>
        <div>Limitations:<ul>
            <li>Supports only one remote (ignores all but the first one),</li>
            <li>Does not support ending sequences (ignores them).</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                xmlns:exporterutils="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.ExporterUtils"
                version="1.0">
    <xsl:output method="text" />
    <xsl:variable name="cIdentifierFactory" select="cidentifierfactory:new()"/>

    <xsl:template match="/">
        <xsl:text><![CDATA[// This Arduino sketch was automatically generated by IrScrutinizer.

// It supports:
//
// * Infrared4Arduino https://github.com/bengtmartensson/Infrared4Arduino,
//                    http://www.harctoolbox.org/Infrared4Arduino.html

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command names.

#include <IrSenderPwm.h>
]]></xsl:text>

<xsl:apply-templates select="//girr:remote[1][//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']]" mode="includeNec1"/>
<xsl:apply-templates select="//girr:remote[1][//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]" mode="includeRc5"/>
<xsl:text>
// Warnings on functions defined but not used are not really useful in
// generated code, disable them.
#pragma GCC diagnostic ignored "-Wunused-function"

// Constants
static const long BAUD = 115200UL; // Change if desired

IrSender *irsend = IrSenderPwm::getInstance(true);

</xsl:text>
<xsl:apply-templates select="//girr:remote[1]//girr:command" mode="definition"/>
<xsl:apply-templates select="//girr:remote[1][//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']]" mode="definitionNec1"/>
<xsl:text>
</xsl:text>
<xsl:apply-templates select="//girr:remote[1][//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]" mode="definitionRc5"/>

<xsl:text><![CDATA[
static void sendRaw(const microseconds_t intro_P[], size_t lengthIntro, const microseconds_t repeat_P[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
    microseconds_t intro[lengthIntro];
    microseconds_t repeat[lengthRepeat];
    memcpy_PF(intro, (uint_farptr_t) intro_P, sizeof(microseconds_t) * lengthIntro);
    memcpy_PF(repeat, (uint_farptr_t) repeat_P, sizeof(microseconds_t) * lengthRepeat);

    IrSignal irSignal(intro, lengthIntro, repeat, lengthRepeat, NULL, 0U, frequency);
    irsend->sendIrSignal(irSignal, times);
}

void setup() {
    Serial.begin(BAUD);
    Serial.setTimeout(60000UL);
}

// A pretty silly main loop; feel free to replace it by something smarter.
void loop() {
    Serial.println(F("Enter number of signal to send (1 .. ]]></xsl:text>
    <xsl:value-of select="count(//girr:remote[1]//girr:command)"/>
    <xsl:text>)"));
    long commandno = Serial.parseInt();
    Serial.println(F("Enter number of times to send it"));
    long times = Serial.parseInt();
    switch (commandno) {
</xsl:text>
        <xsl:apply-templates select="//girr:remote[1]" mode="using"/>
        <xsl:text>    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote[//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']]" mode="includeNec1">
        <xsl:text>#include &lt;Nec1Renderer.h&gt;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote[//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]" mode="includeRc5">
        <xsl:text>#include &lt;Rc5Renderer.h&gt;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote[//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']]" mode="definitionNec1">
        <xsl:text>
static void sendNec1(unsigned D, unsigned S, unsigned F, unsigned times) {
    const IrSignal *irSignal = Nec1Renderer::newIrSignal(D, S, F);
    irsend->sendIrSignal(*irSignal, times);
    delete irSignal;
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote[//girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]" mode="definitionRc5">
        <xsl:text>
static void sendRc5(unsigned D, unsigned F, unsigned times) {
    const IrSignal *irSignal = Rc5Renderer::newIrSignal(D, F);
    irsend->sendIrSignal(*irSignal, times);
    delete irSignal;
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="using">
        <xsl:apply-templates select="//girr:command" mode="using"/>
    </xsl:template>

    <xsl:template match="girr:command" mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:apply-templates select="girr:raw[1]" mode="definition"/>
        <!--xsl:apply-templates select="girr:ccf"/-->
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1'
                                                   or translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]" mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>// Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
        <xsl:text>U</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="definition">
        <xsl:apply-templates select="*" mode="definition"/>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="definition">
        <xsl:text>const microseconds_t </xsl:text>
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                               string(../../@name),
                                                               count(../../preceding-sibling::girr:command))"/>
        <xsl:text>[] PROGMEM = { </xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:flash">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap[position()=last()]">
        <xsl:if test=". &gt; 65535">
            <xsl:text>65535U</xsl:text>
        </xsl:if>
        <xsl:if test=". &lt;= 65535">
            <xsl:value-of select="."/>
            <xsl:text>U</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:command" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        sendRaw(</xsl:text>
        <xsl:apply-templates select="girr:raw[1]" mode="arg"/>
        <xsl:value-of select="girr:raw[1]/@frequency"/>
        <xsl:text>U, times);
</xsl:text>
    </xsl:template>


    <!-- version without S -->
    <xsl:template match="girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']]" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        sendNec1(</xsl:text>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='D']" mode="arg"/>
        <xsl:value-of select="255 - number(girr:parameters/girr:parameter[@name='D']/@value)"/>
        <xsl:text>U, </xsl:text>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='F']" mode="arg"/>
        <xsl:text>times);
        break;
</xsl:text>
    </xsl:template>

    <!-- version with S -->
    <xsl:template match="girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')= 'nec1'][girr:parameter/@name='S']]" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        sendNec1(</xsl:text>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='D']" mode="arg"/>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='S']" mode="arg"/>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='F']" mode="arg"/>
        <xsl:text>times);
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        sendRc5(</xsl:text>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='D']" mode="arg"/>
        <xsl:apply-templates select="girr:parameters/girr:parameter[@name='F']" mode="arg"/>
        <xsl:text>times);
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameter" mode="arg">
         <xsl:value-of select="@value"/>
         <xsl:text>U, </xsl:text>
    </xsl:template>


    <xsl:template match="girr:raw" mode="arg">
        <xsl:if test="not(girr:intro)">
            <xsl:text>NULL, 0U, </xsl:text>
        </xsl:if>
        <xsl:apply-templates select="*" mode="arg"/>
        <xsl:if test="not(girr:repeat)">
            <xsl:text>NULL, 0U, </xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="arg">
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                               string(../../@name),
                                                               count(../../preceding-sibling::girr:command))"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="count(*)"/>
        <xsl:text>U, </xsl:text>
    </xsl:template>

    <!-- just to be on the safe side -->
    <xsl:template match="girr:ending">
        <xsl:comment>Warning: ending sequence in command <xsl:value-of select="../../@name"/> was ignored.</xsl:comment>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>
