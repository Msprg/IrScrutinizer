<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016, 2023 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns="http://www.w3.org/1999/xhtml"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="IRremote Raw" extension="ino" multiSignal="true" simpleSequence="false">
    <exportformats:documentation>
        <div>This export format generates an <a href="https://www.arduino.cc/">Arduino</a> sketch file (.ino).
        The raw format will be used. It uses the IR library
                <a href="https://github.com/Arduino-IRremote/Arduino-IRremote">IRremote</a>,
        </div>
        <div>Limitations:
            <ul>
            <!--li>Supports only one remote (ignores all but the first one),</li-->
            <li>Does not support ending sequences (ignores them).</li>
            <li>Does not support toggling signals (includes only the first one).</li>
            <li>Does not detect obvious data duplication, like repeats that are all equal.</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                version="1.0">
    <xsl:include href="C_raw_utils.xsl"/>
    <xsl:output method="text" />

    <xsl:template match="/">
        <xsl:text><![CDATA[// This Arduino sketch was automatically generated by IrScrutinizer
// using the export format "IRremote Raw".

// It supports IRremote https://github.com/Arduino-IRremote/Arduino-IRremote, current version 4.*.

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command
// names. Under rare circumstances, these may clash with predefined variables,
// or cause other problems.

// Define to send this number of signals.
// Leave undefined to be asked every time.
// Define to 3 for Sony devices.
#define NUMBER_OF_SENDS 1

/////////////////////////////////////////////////////
// This has essenially been copied from SendRawDemo.ino
#include <Arduino.h>
#include <limits.h> // for LONG_MAX

#define DISABLE_CODE_FOR_RECEIVER // Saves 450 bytes program memory and 269 bytes RAM if receiving functions are not used.
#define SEND_PWM_BY_TIMER         // Disable carrier PWM generation in software and use (restricted) hardware PWM.
//#define USE_NO_SEND_PWM           // Use no carrier PWM, just simulate an active low receiver signal. Overrides SEND_PWM_BY_TIMER definition
#define NO_LED_FEEDBACK_CODE      // Saves 566 bytes program memory
//#define USE_OPEN_DRAIN_OUTPUT_FOR_SEND_PIN // Use or simulate open drain output mode at send pin. Attention, active state of open drain is LOW, so connect the send LED between positive supply and send pin!

#include "PinDefinitionsAndMore.h" // Define macros for input and output pin etc.
#include <IRremote.hpp>

typedef uint16_t microseconds_t; // Change if desired
typedef uint16_t frequency_t;    // Change if desired

static inline unsigned hz2khz(frequency_t f) { return f/1000U; }

// Define HAS_FLASH_READ to put the data in PROGMEM.
// As a first guess, use defined(ARDUINO_ARCH_AVR).
// Change if desired.
#ifdef ARDUINO_ARCH_AVR
#define HAS_FLASH_READ
#endif

#ifdef HAS_FLASH_READ
#define LOCATION PROGMEM
#else
#define LOCATION /* nothing */
#endif

// Constants
static constexpr unsigned long BAUD = 115200UL; // Change if desired

]]></xsl:text>
<xsl:apply-templates select="//girr:command" mode="definition"/>

<xsl:text><![CDATA[

unsigned long freeRam () {
    extern int __heap_start, *__brkval;
    int v;
    return (unsigned long) &v - (__brkval == 0 ? (unsigned long) &__heap_start : (unsigned long) __brkval);
}

static void sendRaw
#ifdef HAS_FLASH_READ
(const microseconds_t intro_P[], size_t lengthIntro, const microseconds_t repeat_P[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {

    microseconds_t intro[lengthIntro];
    microseconds_t repeat[lengthRepeat];
    memcpy_PF(intro, (uint_farptr_t) intro_P, sizeof(microseconds_t) * lengthIntro);
    memcpy_PF(repeat, (uint_farptr_t) repeat_P, sizeof(microseconds_t) * lengthRepeat);

#else // ! HAS_FLASH_READ
(const microseconds_t intro[], size_t lengthIntro, const microseconds_t repeat[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {

#endif // ! HAS_FLASH_READ

    if (lengthIntro > 0U)
        IrSender.sendRaw(intro, lengthIntro, hz2khz(frequency));
    if (lengthRepeat > 0U)
        for (unsigned i = 0U; i < times - (lengthIntro > 0U); i++)
            IrSender.sendRaw(repeat, lengthRepeat, hz2khz(frequency));
}

void setup() {
    Serial.begin(BAUD);
    Serial.setTimeout(LONG_MAX);
    pinMode(LED_BUILTIN, OUTPUT);
#if defined(__AVR_ATmega32U4__) || defined(SERIAL_PORT_USBVIRTUAL) || defined(SERIAL_USB) /*stm32duino*/|| defined(USBCON) /*STM32_stm32*/|| defined(SERIALUSB_PID) || defined(ARDUINO_attiny3217)
    delay(4000); // To be able to connect Serial monitor after reset or power up and before first print out. Do not wait for an attached Serial Monitor!
#endif
    // Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));

#if defined(IR_SEND_PIN)
    IrSender.begin(); // Start with IR_SEND_PIN as send pin and enable feedback LED at default feedback LED pin
    Serial.println(F("Send IR signals at pin " STR(IR_SEND_PIN)));
#else
    IrSender.begin(3, ENABLE_LED_FEEDBACK, USE_DEFAULT_FEEDBACK_LED_PIN); // Specify send pin and enable feedback LED at default feedback LED pin
    Serial.println(F("Send IR signals at pin 3"));
#endif
}

// A pretty silly main loop; just intended as an example.
void loop() {
    Serial.println(freeRam());
    Serial.println(F("Enter number of signal to send (1 .. ]]></xsl:text>
    <xsl:value-of select="count(//girr:remote//girr:command)"/>
    <xsl:text>)"));
    long commandno = Serial.parseInt();
#ifdef NUMBER_OF_SENDS
    unsigned int times = NUMBER_OF_SENDS;
#else
    Serial.println(F("Enter number of times to send it"));
    unsigned int times = (unsigned int) Serial.parseInt();
#endif
    switch (commandno) {
</xsl:text>
        <xsl:apply-templates select="//girr:remote" mode="using"/>
        <xsl:text>    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
</xsl:text>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>