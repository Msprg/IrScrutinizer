<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2017, 2019 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Broadlink Python IR" extension="py" multiSignal="true" simpleSequence="false" executable="true">

    <exportformats:documentation>
        <div>This export format generates a Python program utilizing the <a href="https://github.com/mjg59/python-broadlink">Python-Broadlink</a>
            library. This is an interactive commandline program: it can either used by itself,
            or used as a template for creating more elaborate Python applications.
        </div>
        <div>Limitations:
            <ul>
                <li>Contains only a set of the commands; the containing <em>remote</em>(s) and their meta data are ignored,</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                version="1.0">
    <xsl:include href="hex_utils.xsl"/>
    <xsl:include href="base64.xsl"/>
    <xsl:include href="broadlink.xsl"/>
    <xsl:output method="text"/>

    <xsl:template match="/girr:remotes">
        <xsl:text><![CDATA[#! /usr/bin/env python3

# This file has been automatically generated by IrScrutinizer.

# For problems, bugs, and suggestions, please open an issue at
# https://github.com/bengtmartensson/IrScrutinizer/issues

import argparse
import broadlink
import binascii

IR_TOKEN = 0x26
IR_LEADOUT = 0x0D05
RF_433_TOKEN = 0xB2
RF_433_LEADOUT = 0x0181
RF_315_TOKEN = 0xD7
RF_315_LEADOUT = 0xFFFF # ????
TICK = 1000000 / 32768
TOKEN_POS = 0
INTRO = 1
REPEAT = 2
ENDING = 3
LENGTH_LSB_POS = 2
LENGTH_MSB_POS = 3

commands = {
]]></xsl:text>
<xsl:apply-templates select=".//girr:command"/>
<xsl:text><![CDATA[}


def get_command_data(command_name, count):
    cmd = commands[command_name]
    buffer = bytearray()
    buffer.append(cmd[TOKEN_POS])
    repeat_only = len(cmd[INTRO]) == 0 and len(cmd[ENDING]) == 0
    buffer.append(count - 1 if repeat_only else 0)
    seq = cmd[REPEAT] if repeat_only else mk_sequence(cmd, count)
    length = len(seq) if cmd[TOKEN_POS] == IR_TOKEN else len(seq) + 2
    buffer.append(0) # overwritten later
    buffer.append(0) # overwritten later
    intro_length = len(buffer) # = 4

    for d in seq:
        t = round(d / TICK)
        if t > 255:
            buffer.append(0)
            buffer.append(t // 256)
        buffer.append(t % 256)

    length = len(buffer) - intro_length
    buffer[LENGTH_LSB_POS] = length % 256
    buffer[LENGTH_MSB_POS] = length // 256;

    if cmd[TOKEN_POS] == IR_TOKEN:
        t = IR_LEADOUT
        buffer.append(0)
        buffer.append(t // 256)
        buffer.append(t % 256)
    else:
        # Untested
        t = RF_433_LEADOUT if cmd[TOKEN_POS] == RF_433_TOKEN else RF_315_LEADOUT;
        buffer.append(0)
        buffer.append(t // 256)
        buffer.append(t % 256)
        buffer.append(0)
        buffer.append(0)
        buffer.append(0)
        buffer.append(0)

    return buffer


def mk_sequence(cmd, count):
    no_repeats = count if len(cmd[INTRO]) == 0 else count - 1
    data = cmd[INTRO]
    for i in range(0, no_repeats):
        data = data + cmd[REPEAT]
    return data + cmd[ENDING]


def auto_int(x):
    return int(x, 0)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
    parser.add_argument("--device", help="device definition as 'type host mac'")
    parser.add_argument("--type", type=auto_int, default=0x2712, help="type of device")
    parser.add_argument("--host", help="host address")
    parser.add_argument("--mac", help="mac address (hex reverse), as used by python-broadlink library")
    parser.add_argument("--count", default=1, type=int, help="Number of times to send signal")
    parser.add_argument("command", help="Name of command to send, as defined in the code")
    args = parser.parse_args()

    if args.device:
        values = args.device.split()
        type = int(values[0], 0)
        host = values[1]
        mac = bytearray.fromhex(values[2])
    else:
        type = args.type
        host = args.host
        mac = bytearray.fromhex(args.mac)

    dev = broadlink.gendevice(type, (host, 80), mac)
    dev.auth()
    payload = get_command_data(args.command, args.count)
    #print(binascii.hexlify(payload))
    dev.send_data(payload)
]]></xsl:text>
    </xsl:template>

    <xsl:template match="girr:command">
        <xsl:text>
    &apos;</xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>&apos;: [
        # Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>; </xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:apply-templates select="girr:raw[1]"/>
        <xsl:apply-templates select="girr:raw[1]" mode="broadlink"/>
        <xsl:text>    ],
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
    </xsl:template>

    <xsl:template match="girr:raw">
        <xsl:apply-templates select="@frequency"/>
        <xsl:apply-templates select="girr:intro"/>
        <xsl:if test="not(girr:intro)">
            <xsl:text>        [],
</xsl:text>
        </xsl:if>
        <xsl:apply-templates select="girr:repeat"/>
        <xsl:if test="not(girr:repeat)">
            <xsl:text>        [],
</xsl:text>
        </xsl:if>
        <xsl:apply-templates select="girr:ending"/>
        <xsl:if test="not(girr:ending)">
            <xsl:text>        [],
</xsl:text>
        </xsl:if>

    </xsl:template>

    <xsl:template match="@frequency">
    <xsl:text>
        IR_TOKEN,
</xsl:text>
    </xsl:template>

    <xsl:template match="@frequency" mode="xslt">
    <xsl:text>26</xsl:text>
    </xsl:template>

    <xsl:template match="@frequency[number(.)=0]">
    <xsl:text>
        RF_433_TOKEN,
</xsl:text>
    </xsl:template>

    <xsl:template match="@frequency[number(.)=0]" mode="xslt">
    <xsl:text>B2</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="broadlink">
        <xsl:call-template name="binary">
            <xsl:with-param name="hex">
                <xsl:apply-templates select="@frequency" mode="xslt"/>
                <xsl:call-template name="four-hex-digits">
                    <xsl:with-param name="value">
                        <xsl:if test="number(@frequency)=0">
                            <xsl:value-of select="count(*/*)+2"/>
                        </xsl:if>
                        <xsl:if test="number(@frequency)&gt;0">
                            <xsl:value-of select="count(*/*)"/>
                        </xsl:if>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>00</xsl:text>
                <xsl:apply-templates select="*/*" mode="broadlink"/>
            </xsl:with-param>
        </xsl:call-template>
    </xsl:template>

    <xsl:template name="binary">
        <xsl:param name="hex"/>
        <xsl:text>        </xsl:text>
        <xsl:call-template name="bytearray-fromhex">
            <xsl:with-param name="data" select="$hex"/>
        </xsl:call-template>
        <xsl:text>,
        &apos;</xsl:text>
        <xsl:call-template name="base64">
            <xsl:with-param name="data" select="$hex"/>
        </xsl:call-template>
        <xsl:text>&apos;
</xsl:text>
    </xsl:template>

    <xsl:template name="bytearray-fromhex">
        <xsl:param name="data"/>
        <xsl:text>bytearray.fromhex(&apos;</xsl:text>
        <xsl:value-of select="$data"/>
        <xsl:text>&apos;)</xsl:text>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat">
        <xsl:text>        [</xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text>],
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:ending">
        <xsl:text>        [</xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text>],
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:flash|girr:gap">
        <xsl:value-of select="text()"/>
        <xsl:if test="position()!=last()">
            <xsl:text>,</xsl:text>
        </xsl:if>
     </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>
