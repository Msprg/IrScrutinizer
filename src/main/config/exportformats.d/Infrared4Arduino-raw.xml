<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016, 2023 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns="http://www.w3.org/1999/xhtml"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Infrared4Arduino Raw" extension="ino" multiSignal="true" simpleSequence="false">
    <exportformats:documentation>
        <div>This export format generates an <a href="https://www.arduino.cc/">Arduino</a> sketch file (.ino).
        The raw format will be used. It requires the IR library
        <a href="https://github.com/bengtmartensson/Infrared4Arduino">Infrared4Arduino</a>  (see also <a href="http://www.harctoolbox.org/Infrared4Arduino.html">this</a>).
        This is available in the Arduino library manager under the name <em>Infrared</em>.
        </div>
        <div>Limitations:<ul>
            <!--li>Supports only one remote (ignores all but the first one),</li-->
            <li>Does not support ending sequences (ignores them).</li>
            <li>Does not support toggling signals (includes only the first one).</li>
            <li>Does not detect obvious data duplication, like repeats that are all equal.</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                version="1.0">
    <xsl:output method="text" />
    <xsl:variable name="cIdentifierFactory" select="cidentifierfactory:new()"/>

    <xsl:template match="/">
        <xsl:text><![CDATA[// This Arduino sketch was automatically generated by IrScrutinizer.
// using the export format "Infrared4Arduino Raw".

// It supports Infrared4Arduino
// https://github.com/bengtmartensson/Infrared4Arduino,
// see also http://www.harctoolbox.org/Infrared4Arduino.html.
// It is available in the Arduino library manager using the name "Infrared".

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command
// names. Under rare circumstances, these may clash with predefined variables,
// or cause other problems.

// Define to send this number of signals.
// Leave undefined to be asked every time.
// Define to 3 for Sony devices.
#define NUMBER_OF_SENDS 1

/////////////////////////////////////////////////////
#include <IrSenderPwm.h>
#include <limits.h> // for LONG_MAX

// If your board defines HAS_FLASH_READ and you do not like it,
// feel free to undefine it.
#undef HAS_FLASH_READ

#ifdef HAS_FLASH_READ
#define LOCATION PROGMEM
#else
#define LOCATION /* nothing */
#endif

// For development
#ifdef ARDUINO_ARCH_AVR
#define MEMORY_TRACING
#endif

// Constants
static constexpr unsigned long BAUD = 115200UL; // Change as desired

// Global variables
static IrSender *irsend = IrSenderPwm::getInstance(true);

//////////////////// Command data ////////////////////////

]]></xsl:text>
<xsl:apply-templates select="//girr:command" mode="definition"/>

<xsl:text><![CDATA[
#ifdef MEMORY_TRACING
#ifndef ARDUINO_ARCH_AVR
#error MEMORY_TRACING presently only works with AVR
#endif

unsigned long freeRam () {
    extern int __heap_start, *__brkval;
    int v;
    return (unsigned long) &v - (__brkval == 0 ? (unsigned long) &__heap_start : (unsigned long) __brkval);
}
#endif // MEMORY_TRACING

static void sendRaw
#if HAS_FLASH_READ
(const microseconds_t intro_P[], size_t lengthIntro, const microseconds_t repeat_P[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
    IrSequence* introSequence = IrSequence::readFlash(intro_P, lengthIntro);
    IrSequence* repeatSequence = IrSequence::readFlash(repeat_P, lengthRepeat);

#else // ! HAS_FLASH_READ
(const microseconds_t intro[], size_t lengthIntro, const microseconds_t repeat[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {

    microseconds_t* intr = new microseconds_t[lengthIntro];
    for (unsigned int i = 0; i < lengthIntro; i++)
        intr[i] = intro[i];
    microseconds_t* rep = new microseconds_t[lengthRepeat];
    for (unsigned int i = 0; i < lengthRepeat; i++)
        rep[i] = repeat[i];
    IrSequence* introSequence = new IrSequence(intr, lengthIntro);
    IrSequence* repeatSequence = new IrSequence(rep, lengthRepeat);
#endif // ! HAS_FLASH_READ

    IrSignal irSignal(*introSequence, *repeatSequence, frequency);
    irsend->sendIrSignal(irSignal, times);
    delete introSequence;
    delete repeatSequence;
}

void setup() {
    Serial.begin(BAUD);
    Serial.setTimeout(LONG_MAX);

    Serial.println(F("Running " __FILE__));
    Serial.println(F("using Infrared4Arduino version " VERSION));
}

// A pretty silly main loop; just intended as an example.
void loop() {
#ifdef MEMORY_TRACING
    Serial.print(F("Available memory: "));
    Serial.println(freeRam());
#endif
    Serial.print(F("Enter number of signal to send (1 .. ]]></xsl:text>
    <xsl:value-of select="count(//girr:command)"/>
    <xsl:text>): "));
    long commandno = Serial.parseInt();
    Serial.println(commandno);
#ifdef NUMBER_OF_SENDS
    unsigned int times = NUMBER_OF_SENDS;
#else // ! NUMBER_OF_SENDS
    Serial.print(F("Enter number of times to send it: "));
    unsigned int times = (unsigned int) Serial.parseInt();
    Serial.println(times);
#endif // ! NUMBER_OF_SENDS
    switch (commandno) {
</xsl:text>
        <xsl:apply-templates select="//girr:remote" mode="using"/>
        <xsl:text>    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="using">
        <xsl:apply-templates select="//girr:command" mode="using"/>
    </xsl:template>

    <xsl:template match="girr:command" mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:apply-templates select="girr:raw[2]" mode="togglewarning"/>
        <xsl:apply-templates select="girr:raw[1]" mode="definition"/>
        <!--xsl:apply-templates select="girr:ccf"/-->
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>// Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
    </xsl:template>

    <xsl:template match="girr:raw" mode="togglewarning">
        <xsl:text>// Warning: this signal has toggles, i.e. several different raw versions.
// Only the first one is given here.
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="definition">
        <xsl:apply-templates select="*" mode="definition"/>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="definition">
        <xsl:text>const microseconds_t </xsl:text>
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                               string(../../@name),
                                                               count(../../preceding-sibling::girr:command))"/>
        <xsl:text>[] LOCATION = { </xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:flash">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap[position()=last()]">
        <xsl:if test=". &gt; 65535">
            <xsl:text>65535U</xsl:text>
        </xsl:if>
        <xsl:if test=". &lt;= 65535">
            <xsl:value-of select="."/>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:command" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>U:
</xsl:text>
    <xsl:text>        sendRaw(</xsl:text>
        <xsl:apply-templates select="girr:raw[1]" mode="arg"/>
        <xsl:value-of select="girr:raw[1]/@frequency"/>
        <xsl:text>U, times);
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="arg">
        <xsl:if test="not(girr:intro)">
            <xsl:text>NULL, 0U, </xsl:text>
        </xsl:if>
        <xsl:apply-templates select="*" mode="arg"/>
        <xsl:if test="not(girr:repeat)">
            <xsl:text>NULL, 0U, </xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="arg">
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                                string(../../@name),
                                                                count(../../preceding-sibling::girr:command))"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="count(*)"/>
        <xsl:text>U, </xsl:text>
    </xsl:template>

    <!-- just to be on the safe side -->
    <xsl:template match="girr:ending">
        <xsl:comment>Warning: ending sequence in command <xsl:value-of select="../../@name"/> was ignored.</xsl:comment>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>