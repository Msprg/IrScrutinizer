<?xml version="1.0" encoding="UTF-8"?>
<!--
            This file has been automatically generated by IrpTransmogrifier,
            using its protocol data base, and the transformation file lirc.xsl.

            Command- and remote names are required just to consist of
            non-whitespace characters. We therefore use translate(*, ' ', '_')
            instead of something more elaborate.

            Generating program: IrpTransmogrifier version 1.2.14-SNAPSHOT
            IRP database version: 2024-03-14
-->
<exportformats:exportformat xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xmlns:harctoolbox="http://www.harctoolbox.org"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            name="Lirc"
                            extension="lircd.conf"
                            multiSignal="true"
                            simpleSequence="false"
                            metadata="true"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd">
   <xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                   xmlns:exporterutils="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.ExporterUtils"
                   version="1.0">
      <xsl:output method="text"/>
      <xsl:template match="/girr:remotes">
         <xsl:text xml:space="preserve"># </xsl:text>
         <xsl:value-of select="@title"/>
         <xsl:text>
#
# Creating tool: </xsl:text>
         <xsl:value-of select="$creatingTool"/>
         <xsl:text>
# Creating user: </xsl:text>
         <xsl:value-of select="$creatingUser"/>
         <xsl:text>
# Creating date: </xsl:text>
         <xsl:value-of select="$creatingDate"/>
         <xsl:text>
# Encoding: </xsl:text>
         <xsl:value-of select="$encoding"/>
         <xsl:text>
#
</xsl:text>
         <xsl:apply-templates select="girr:remote"/>
      </xsl:template>
      <xsl:template match="girr:remote">
         <xsl:text># Manufacturer: </xsl:text>
         <xsl:value-of select="@manufacturer"/>
         <xsl:text>
# Model: </xsl:text>
         <xsl:value-of select="@model"/>
         <xsl:text>
# Displayname: </xsl:text>
         <xsl:value-of select="@displayName"/>
         <xsl:text>
# Device Class: </xsl:text>
         <xsl:value-of select="@deviceClass"/>
         <xsl:text>
# Remotename: </xsl:text>
         <xsl:value-of select="@remoteName"/>
         <xsl:text>
#
</xsl:text>
         <xsl:apply-templates select="//girr:parameters[@protocol[not(. = ../../preceding-sibling::*//@protocol)]]"/>
      </xsl:template>

      <!-- ################ Default protocol rule, raw codes ############## -->
      <xsl:template match="girr:parameters">
         <xsl:text>
# Raw signals
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-raw
	flags		RAW_CODES
	eps		30
	aeps		100
	frequency	</xsl:text>
         <xsl:value-of select="/*//girr:command[1]/girr:raw/@frequency"/>
         <xsl:text>
	gap		</xsl:text>
         <xsl:value-of select="/*//girr:command[1]/girr:raw/girr:repeat/girr:gap[position()=last()]"/>
         <xsl:text>
	begin raw_codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:raw]" mode="raw"/>
         <xsl:text>	end raw_codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template match="girr:command">
         <xsl:text># </xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text xml:space="preserve"> not renderable, skipped
</xsl:text>
      </xsl:template>
      <xsl:template match="girr:command[girr:raw]" mode="raw">
         <xsl:text>		name </xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text xml:space="preserve">
</xsl:text>
         <xsl:apply-templates select="girr:raw[1]"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <xsl:template match="girr:raw">
         <xsl:apply-templates select="girr:intro"/>
         <xsl:if test="not(girr:intro)">
            <xsl:apply-templates select="girr:repeat"/>
         </xsl:if>
      </xsl:template>
      <xsl:template match="girr:intro|girr:repeat">
         <xsl:text xml:space="preserve">			</xsl:text>
         <xsl:apply-templates select="*"/>
      </xsl:template>
      <xsl:template match="girr:flash">
         <xsl:value-of select="."/>
         <xsl:text xml:space="preserve"> </xsl:text>
      </xsl:template>
      <xsl:template match="girr:gap">
         <xsl:value-of select="."/>
         <xsl:text xml:space="preserve"> </xsl:text>
      </xsl:template>
      <xsl:template match="girr:gap[position() mod 4 = 0]">
         <xsl:value-of select="."/>
         <xsl:text xml:space="preserve">
			</xsl:text>
      </xsl:template>
      <xsl:template match="girr:gap[position()=last()]"/>

      <!-- ################## Protocol 48-NEC ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,E:8,~E:8,1,^108m)[D:0..255,S:0..255=255-D,F:0..255,E:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = '48-nec']">
         <xsl:text xml:space="preserve">
# Protocol name: 48-NEC
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-48-NEC
	bits		48
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = '48-nec']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-48-nec">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $E, 8, 0, true(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='48-nec']">
         <xsl:call-template name="command-48-nec">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='48-nec' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-48-nec">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol 48-NEC1 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,E:8,~E:8,1,^108m,(16,-4,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..255,E:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = '48-nec1']">
         <xsl:text xml:space="preserve">
# Protocol name: 48-NEC1
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-48-NEC1
	bits		48
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = '48-nec1']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-48-nec1">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $E, 8, 0, true(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='48-nec1']">
         <xsl:call-template name="command-48-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='48-nec1' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-48-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol 48-NEC2 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,E:8,~E:8,1,^108m)*[D:0..255,S:0..255=255-D,F:0..255,E:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = '48-nec2']">
         <xsl:text xml:space="preserve">
# Protocol name: 48-NEC2
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-48-NEC2
	bits		48
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = '48-nec2']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-48-nec2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $E, 8, 0, true(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='48-nec2']">
         <xsl:call-template name="command-48-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='48-nec2' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-48-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol AdNotam ################ -->
      <!-- IRP:{35.7k,895,msb}<1,-1|-1,1>(1,-2,1,D:6,F:6,^114m)*[D:0..63,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'adnotam']">
         <xsl:text xml:space="preserve">
# Protocol name: AdNotam
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-AdNotam
	bits		12
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		895	895
	one		895	895
	header		895	1790
	plead		895
	gap		114000
	frequency	35700
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'adnotam']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-adnotam">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='adnotam']">
         <xsl:call-template name="command-adnotam">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Aiwa ################ -->
      <!-- IRP:{38.123k,550}<1,-1|1,-3>(16,-8,D:8,S:5,~D:8,~S:5,F:8,~F:8,1,-42,(16,-8,1,-165)*)[D:0..255,S:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'aiwa']">
         <xsl:text xml:space="preserve">
# Protocol name: Aiwa
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Aiwa
	bits		42
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		550	550
	one		550	1650
	header		8800	4400
	ptrail		550
	repeat		8800	4400
	gap		23100
	frequency	38123
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'aiwa']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-aiwa">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 5, 0, true(), true(), $D, 8, 0, true(), true(), $S, 5, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='aiwa']">
         <xsl:call-template name="command-aiwa">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Aiwa2 ################ -->
      <!-- IRP:{38k,550}<1,-1|1,-3>(16,-8,D:8,S:5,~D:8,~S:5,F:8,~F:8,1,-42)* [D:0..255,S:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'aiwa2']">
         <xsl:text xml:space="preserve">
# Protocol name: Aiwa2
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Aiwa2
	bits		42
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		550	550
	one		550	1650
	header		8800	4400
	ptrail		550
	gap		23100
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'aiwa2']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-aiwa2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 5, 0, true(), true(), $D, 8, 0, true(), true(), $S, 5, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='aiwa2']">
         <xsl:call-template name="command-aiwa2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Akai ################ -->
      <!-- IRP:{38k,289}<1,-2.6|1,-6.3>(D:3,F:7,1,^25.3m)*[D:0..7,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'akai']">
         <xsl:text xml:space="preserve">
# Protocol name: Akai
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Akai
	bits		10
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		289	751
	one		289	1821
	ptrail		289
	gap		25300
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'akai']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-akai">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='akai']">
         <xsl:call-template name="command-akai">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Akord ################ -->
      <!-- IRP:{37.0k,477,msb}<1,-1|1,-2>(18,-8,D:8,S:8,F:8,~F:8,1,-40m,(18,-5,1,-78m)*)[D:0..255,S:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'akord']">
         <xsl:text xml:space="preserve">
# Protocol name: Akord
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Akord
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		477	477
	one		477	954
	header		8586	3816
	ptrail		477
	repeat		8586	2385
	gap		40000
	frequency	37000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'akord']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-akord">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='akord']">
         <xsl:call-template name="command-akord">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Amazon_Fan ################ -->
      <!-- IRP:{38.5k,520,msb}<1,-3|1,-5>(9,-9,D:8,F:8,0:1,9,-9,D:8,F:8,1,-13.7m,(9074u,-5,1,-52m)*)[D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'amazon_fan']">
         <xsl:text xml:space="preserve">
# Protocol name: Amazon_Fan
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Amazon_Fan
	bits		33
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		520	1560
	one		520	2600
	header		4680	4680
	ptrail		520
	repeat		9074	2600
	gap		13700
	frequency	38500
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'amazon_fan']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-amazon_fan">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $F, 8, 0, false(), false(), 0, 1, 0, false(), false(), $D, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='amazon_fan']">
         <xsl:call-template name="command-amazon_fan">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Amino omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Amino-56 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Anthem omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Anthem_relaxed omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Apple omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Archer ################ -->
      <!-- IRP:{0k,12}<1,-3.3m|1,-4.7m>(F:5,1,-9.7m)* [F:0..31] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'archer']">
         <xsl:text xml:space="preserve">
# Protocol name: Archer
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Archer
	bits		5
	flags		SPACE_ENC
	eps		10
	aeps		100
	zero		12	3300
	one		12	4700
	ptrail		12
	gap		9700
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'archer']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-archer">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='archer']">
         <xsl:call-template name="command-archer">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol arctech omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol arctech-38 omitted: Hierarchical BitspecIrStreams.-->

      <!-- ################## Protocol Audiovox ################ -->
      <!-- IRP:{40k,500}<1,-1|1,-3>(16,-8,D:8,1,-8,F:8,1,-40)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'audiovox']">
         <xsl:text xml:space="preserve">
# Protocol name: Audiovox
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Audiovox
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		8000	4000
	ptrail		500
	gap		20000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'audiovox']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-audiovox">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='audiovox']">
         <xsl:call-template name="command-audiovox">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol B&O omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- Protocol B&O repeat omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- ################## Protocol Barco ################ -->
      <!-- IRP:{0k,10}<1,-5|1,-15>(1,-25, D:5,F:6, 1,-25,1,-120m)*[D:0..31,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'barco']">
         <xsl:text xml:space="preserve">
# Protocol name: Barco
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Barco
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		60
	zero		10	50
	one		10	150
	header		10	250
	ptrail		10
	gap		120000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'barco']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-barco">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='barco']">
         <xsl:call-template name="command-barco">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Blaupunkt omitted: Interleaved bitfields and durations.-->

      <!-- ################## Protocol Bose ################ -->
      <!-- IRP:{38.0k,500,msb}<1,-1|1,-3>(2,-3,F:8,~F:8,1,-50m)* [F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'bose']">
         <xsl:text xml:space="preserve">
# Protocol name: Bose
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Bose
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		1000	1500
	ptrail		500
	gap		50000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'bose']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-bose">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 8, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='bose']">
         <xsl:call-template name="command-bose">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Bryston ################ -->
      <!-- IRP:{38.0k,315}<1,-6|6,-1>(D:10,F:8,-18m)* [D:0..1023,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'bryston']">
         <xsl:text xml:space="preserve">
# Protocol name: Bryston
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Bryston
	bits		18
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		315	1890
	one		1890	315
	gap		18000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'bryston']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-bryston">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 10, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='bryston']">
         <xsl:call-template name="command-bryston">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol CanalSat omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- Protocol CanalSatLD omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- ################## Protocol Canon ################ -->
      <!-- IRP:{33k,1}<16p,-240p|16p,-175p>(F:1)2[F:0..1] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'canon']">
         <xsl:text xml:space="preserve">
# Protocol name: Canon
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Canon
	bits		2
	flags		SPACE_ENC
	eps		10
	aeps		50
	zero	
	one	
	frequency	33000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'canon']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-canon">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 1, 0, false(), true(), $F, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='canon']">
         <xsl:call-template name="command-canon">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Denon ################ -->
      <!-- IRP:{38k,264}<1,-3|1,-7>(D:5,F:8,0:2,1,-165,D:5,~F:8,3:2,1,-165)* [D:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'denon']">
         <xsl:text xml:space="preserve">
# Protocol name: Denon
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Denon
	bits		30
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'denon']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-denon">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 0, 2, 0, false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 3, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='denon']">
         <xsl:call-template name="command-denon">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Denon-K omitted: Expressions as bitfields not implemented yet.-->

      <!-- ################## Protocol Denon{1} ################ -->
      <!-- IRP:{38k,264}<1,-3|1,-7>(D:5,F:8,0:2,1,-165)* [D:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'denon{1}']">
         <xsl:text xml:space="preserve">
# Protocol name: Denon{1}
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Denon{1}
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'denon{1}']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-denon-1-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 0, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='denon{1}']">
         <xsl:call-template name="command-denon-1-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Denon{2} ################ -->
      <!-- IRP:{38k,264}<1,-3|1,-7>(D:5,~F:8,3:2,1,-165)* [D:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'denon{2}']">
         <xsl:text xml:space="preserve">
# Protocol name: Denon{2}
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Denon{2}
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'denon{2}']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-denon-2-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 3, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='denon{2}']">
         <xsl:call-template name="command-denon-2-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Dgtec ################ -->
      <!-- IRP:{38k,560}<1,-1|1,-3>(16,-8,D:8,F:8,~F:8,1,^108m,(16,-4,1,^108m)*) [D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dgtec']">
         <xsl:text xml:space="preserve">
# Protocol name: Dgtec
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Dgtec
	bits		24
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		560	560
	one		560	1680
	header		8960	4480
	ptrail		560
	repeat		8960	2240
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dgtec']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dgtec">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dgtec']">
         <xsl:call-template name="command-dgtec">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Digivision ################ -->
      <!-- IRP:{38.0k,182}<3,-3|3,-6>(20,-10,D:8,Dev2:8,Dev3:8,20,-10,F:8,~F:8,3,^108m,(20,-20,3,^108m)*)
[D:0..255,Dev2:0..255,Dev3:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'digivision']">
         <xsl:text xml:space="preserve">
# Protocol name: Digivision
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Digivision
	bits		40
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		546	546
	one		546	1092
	header		3640	1820
	ptrail		546
	repeat		3640	3640
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'digivision']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-digivision">
         <xsl:param name="D"/>
         <xsl:param name="Dev2"/>
         <xsl:param name="Dev3"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $Dev2, 8, 0, false(), true(), $Dev3, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='digivision']">
         <xsl:call-template name="command-digivision">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="Dev2"
                            select="number(girr:parameters/girr:parameter[@name='Dev2']/@value)"/>
            <xsl:with-param name="Dev3"
                            select="number(girr:parameters/girr:parameter[@name='Dev3']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol DirecTV_3FG omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol DirecTV_P0 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol DirecTV_P1 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol DirecTV_P2 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol DirecTV_P3 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol DirecTV_P4 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol DirecTV_P5 omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Dish_Network ################ -->
      <!-- IRP:{57.6k,406}<1,-7|1,-4>(1,-15,(F:-6,S:5,D:5,1,-15)+) [F:0..63,S:0..31,D:0..31] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dish_network']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Dish_Network
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Dish_Network
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		406	2842
	one		406	1624
	header		406	6090
	ptrail		406
	gap		6090
	frequency	57600
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dish_network']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dish_network">
         <xsl:param name="F"/>
         <xsl:param name="S"/>
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0, false(), true(), $S, 5, 0, false(), true(), $D, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dish_network']">
         <xsl:call-template name="command-dish_network">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Dishplayer ################ -->
      <!-- IRP:{38.4k,535,msb}<1,-5|1,-3>(1,-11,(F:6,S:5,D:2,1,-11)+) [F:0..63,S:0..31,D:0..3] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dishplayer']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Dishplayer
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Dishplayer
	bits		13
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		535	2675
	one		535	1605
	header		535	5885
	ptrail		535
	gap		5885
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dishplayer']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dishplayer">
         <xsl:param name="F"/>
         <xsl:param name="S"/>
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0, false(), false(), $S, 5, 0, false(), false(), $D, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dishplayer']">
         <xsl:call-template name="command-dishplayer">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Dyson ################ -->
      <!-- IRP:{780,38k}<1,-1|1,-2>(3,-1,D:7,F:6,T:-2,1,-100m,3,-1,D:7,F:6,T:-2,1,-60m,(3,-1,1:1,1,-60m)*,T=(T+1)%3)[D:0..127,F:0..63,T@:0..3=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dyson']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Dyson
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Dyson
	bits		30
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		780	780
	one		780	1560
	header		2340	780
	ptrail		780
	gap		60000
	toggle_bit	1429
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dyson']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dyson">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 7, 0, false(), true(), $F, 6, 0, false(), false(), $T, 2, 0, false(), true(), $D, 7, 0, false(), true(), $F, 6, 0, false(), false(), $T, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson']">
         <xsl:call-template name="command-dyson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson']">
         <xsl:call-template name="command-dyson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-dyson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Dyson2 ################ -->
      <!-- IRP:{780,38k}<1,-1|1,-2>(3,-1,D:7,F:6,T:-2,1,-400m,3,-1,D:7,F:6,T:-2,1,-60m,(3,-1,1:1,1,-60m)*,T=(T+1)%3)[D:0..127,F:0..63,T@:0..3=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dyson2']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Dyson2
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Dyson2
	bits		30
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		780	780
	one		780	1560
	header		2340	780
	ptrail		780
	gap		60000
	toggle_bit	1429
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dyson2']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dyson2">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 7, 0, false(), true(), $F, 6, 0, false(), false(), $T, 2, 0, false(), true(), $D, 7, 0, false(), true(), $F, 6, 0, false(), false(), $T, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson2']">
         <xsl:call-template name="command-dyson2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson2']">
         <xsl:call-template name="command-dyson2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson2' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-dyson2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Dyson_relaxed ################ -->
      <!-- IRP:{780,38k}<1,-1|1,-2>(3,-1,D:7,F:6,T:-2,1,-100m)*[D:0..127,F:0..63,T:0..3=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dyson_relaxed']">
         <xsl:text xml:space="preserve">
# Protocol name: Dyson_relaxed
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Dyson_relaxed
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		780	780
	one		780	1560
	header		2340	780
	ptrail		780
	gap		100000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'dyson_relaxed']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-dyson_relaxed">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 7, 0, false(), true(), $F, 6, 0, false(), false(), $T, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson_relaxed']">
         <xsl:call-template name="command-dyson_relaxed">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='dyson_relaxed' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-dyson_relaxed">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Elan ################ -->
      <!-- IRP:{0k,398,msb}<1,-1|1,-2>(3,-2,D:8,~D:8,2,-2,F:8,~F:8,1,^50m)* [D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'elan']">
         <xsl:text xml:space="preserve">
# Protocol name: Elan
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Elan
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		398	398
	one		398	796
	header		1194	796
	ptrail		398
	gap		50000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'elan']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-elan">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, true(), false(), $D, 8, 0, false(), false(), $F, 8, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='elan']">
         <xsl:call-template name="command-elan">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Elunevision ################ -->
      <!-- IRP:{0k,358,msb}<1,-3|3,-1>(10,-3,D:24,F:8,-7)*{D=0xf48080} [F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'elunevision']">
         <xsl:text xml:space="preserve">
# Protocol name: Elunevision
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Elunevision
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		358	1074
	one		1074	358
	header		3580	1074
	gap		2506
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'elunevision']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-elunevision">
         <xsl:param name="F"/>
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 24, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='elunevision']">
         <xsl:call-template name="command-elunevision">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="D" select="number(16023680)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Emerson ################ -->
      <!-- IRP:{36.7k,872}<1,-1|1,-3>(4,-4,D:6,F:6,~D:6,~F:6,1,-39)* [D:0..63,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'emerson']">
         <xsl:text xml:space="preserve">
# Protocol name: Emerson
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Emerson
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		872	872
	one		872	2616
	header		3488	3488
	ptrail		872
	gap		34008
	frequency	36700
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'emerson']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-emerson">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $F, 6, 0, true(), true(), $D, 6, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='emerson']">
         <xsl:call-template name="command-emerson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol entone omitted: Hierarchical BitspecIrStreams.-->

      <!-- ################## Protocol Epson ################ -->
      <!-- IRP:{38.4k,577}<2,-1|1,-2|1,-1|2,-2>((4,-1,D:8,T1:2,OBC:6,T2:2,S:8,1,-75m)*,(4,-1,D:8,~F1:2,OBC:6,~F2:2,S:8,1,-250m))
               [D:0..255,S:0..255,OBC:0..63,T1:0..3,T2:0..3,F1:0..3,F2:0..3] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'epson']">
         <xsl:text># Warning: Protocol contains ending that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Epson
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Epson
	bits		26
	flags		RCMM
	eps		30
	aeps		100
	zero		1154	577
	one		577	1154
	two		577	577
	three		1154	1154
	header		2308	577
	ptrail		577
	gap		75000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'epson']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-epson">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="OBC"/>
         <xsl:param name="T1"/>
         <xsl:param name="T2"/>
         <xsl:param name="F1"/>
         <xsl:param name="F2"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $T1, 2, 0, false(), true(), $OBC, 6, 0, false(), true(), $T2, 2, 0, false(), true(), $S, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='epson']">
         <xsl:call-template name="command-epson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="OBC"
                            select="number(girr:parameters/girr:parameter[@name='OBC']/@value)"/>
            <xsl:with-param name="T1"
                            select="number(girr:parameters/girr:parameter[@name='T1']/@value)"/>
            <xsl:with-param name="T2"
                            select="number(girr:parameters/girr:parameter[@name='T2']/@value)"/>
            <xsl:with-param name="F1"
                            select="number(girr:parameters/girr:parameter[@name='F1']/@value)"/>
            <xsl:with-param name="F2"
                            select="number(girr:parameters/girr:parameter[@name='F2']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Eufy omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol F12 ################ -->
      <!-- IRP:{37.9k,422}<1,-3|3,-1>((D:3,S:1,F:8,-80)2)*  [D:0..7,S:0..1,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12']">
         <xsl:text xml:space="preserve">
# Protocol name: F12
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-F12
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	gap		33760
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f12">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $S, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 3, 0, false(), true(), $S, 1, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='f12']">
         <xsl:call-template name="command-f12">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F12-0 ################ -->
      <!-- IRP:{37.9k,422}<1,-3|3,-1>(D:3,H:1,F:8,-34,D:3,H:1,F:8) {H=0} [D:0..7,F:0..0xFF] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12-0']">
         <xsl:text xml:space="preserve">
# Protocol name: F12-0
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-F12-0
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12-0']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f12-0">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="H"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $H, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 3, 0, false(), true(), $H, 1, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='f12-0']">
         <xsl:call-template name="command-f12-0">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="H" select="number(0)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F12-1 ################ -->
      <!-- IRP:{37.9k,422}<1,-3|3,-1>(D:3,H:1,F:8,-34,D:3,H:1,F:8,-88,D:3,H:1,F:8,-34,D:3,H:1,F:8)* {H=1} [D:0..7,F:0..0xFF] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12-1']">
         <xsl:text xml:space="preserve">
# Protocol name: F12-1
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-F12-1
	bits		48
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12-1']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f12-1">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="H"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $H, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 3, 0, false(), true(), $H, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 3, 0, false(), true(), $H, 1, 0, false(), true(), $F, 8, 0, false(), true(), $D, 3, 0, false(), true(), $H, 1, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='f12-1']">
         <xsl:call-template name="command-f12-1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="H" select="number(1)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F12_relaxed ################ -->
      <!-- IRP:{37.9k,422}<1,-3|3,-1>(D:3,S:1,F:8,-80)*  [D:0..7,S:0..1,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12_relaxed']">
         <xsl:text xml:space="preserve">
# Protocol name: F12_relaxed
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-F12_relaxed
	bits		12
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	gap		33760
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12_relaxed']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f12_relaxed">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $S, 1, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='f12_relaxed']">
         <xsl:call-template name="command-f12_relaxed">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F12x ################ -->
      <!-- IRP:{37.9k,422}<1,-3|3,-1>((D:3,S:1,F:8,-16)*,(D:3,S:1,E:8,-16))[D:0..7,S:0..1,F:0..255,E:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12x']">
         <xsl:text># Warning: Protocol contains ending that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: F12x
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-F12x
	bits		12
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	gap		6752
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f12x']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f12x">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $S, 1, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='f12x']">
         <xsl:call-template name="command-f12x">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol F32 ################ -->
      <!-- IRP:{37.9k,422,msb}<1,-3|3,-1>(D:8,S:8,F:8,E:8,-100m)*  [D:0..255,S:0..255,F:0..255,E:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f32']">
         <xsl:text xml:space="preserve">
# Protocol name: F32
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-F32
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		422	1266
	one		1266	422
	gap		100000
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'f32']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-f32">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0, false(), false(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='f32']">
         <xsl:call-template name="command-f32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Fujitsu ################ -->
      <!-- IRP:{37k,432}<1,-1|1,-3>(8,-4,20:8,99:8,0:4,E:4,D:8,S:8,F:8,1,-110)* [D:0..255,S:0..255=D,F:0..255,E:0..15=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'fujitsu']">
         <xsl:text xml:space="preserve">
# Protocol name: Fujitsu
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Fujitsu
	bits		48
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		432	432
	one		432	1296
	header		3456	1728
	ptrail		432
	gap		47520
	frequency	37000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'fujitsu']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-fujitsu">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 20, 8, 0, false(), true(), 99, 8, 0, false(), true(), 0, 4, 0, false(), true(), $E, 4, 0, false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='fujitsu']">
         <xsl:call-template name="command-fujitsu">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='fujitsu' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-fujitsu">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Fujitsu-128 omitted: Too many bits (128 > 64)".-->

      <!-- ################## Protocol Fujitsu-56 ################ -->
      <!-- IRP:{37k,432}<1,-1|1,-3>(8,-4,20:8,99:8,0:4,E:4,D:8,S:8,X:8,F:8,1,-110)* [D:0..255,S:0..255=D,F:0..255,E:0..15=0,X:0..255=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'fujitsu-56']">
         <xsl:text xml:space="preserve">
# Protocol name: Fujitsu-56
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Fujitsu-56
	bits		56
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		432	432
	one		432	1296
	header		3456	1728
	ptrail		432
	gap		47520
	frequency	37000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'fujitsu-56']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-fujitsu-56">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:param name="X"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 20, 8, 0, false(), true(), 99, 8, 0, false(), true(), 0, 4, 0, false(), true(), $E, 4, 0, false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $X, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='fujitsu-56']">
         <xsl:call-template name="command-fujitsu-56">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E" select="0"/>
            <xsl:with-param name="X" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='fujitsu-56' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E'] and girr:parameters/girr:parameter[@name='X']]">
         <xsl:call-template name="command-fujitsu-56">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
            <xsl:with-param name="X"
                            select="number(girr:parameters/girr:parameter[@name='X']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Fujitsu_Aircon omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Fujitsu_Aircon_old omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol G.I.4DTV omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol G.I.4DTV_relaxed ################ -->
      <!-- IRP:{37.3k,992}<1,-1|1,-3>(5,-2,F:6,D:2,C:4,1,-60)*[D:0..3, F:0..63, C:0..15] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'g.i.4dtv_relaxed']">
         <xsl:text xml:space="preserve">
# Protocol name: G.I.4DTV_relaxed
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-G.I.4DTV_relaxed
	bits		12
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		992	992
	one		992	2976
	header		4960	1984
	ptrail		992
	gap		59520
	frequency	37300
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'g.i.4dtv_relaxed']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-g-i-4dtv_relaxed">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="C"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 6, 0, false(), true(), $D, 2, 0, false(), true(), $C, 4, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='g.i.4dtv_relaxed']">
         <xsl:call-template name="command-g-i-4dtv_relaxed">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="C"
                            select="number(girr:parameters/girr:parameter[@name='C']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol G.I.Cable omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol GI RG ################ -->
      <!-- IRP:{37.3k,1000, msb}<1,-1|1,-3>(5,-3,F:6,S:2,D:8,1,-60)*[D:0..255, S:0..3, F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'gi rg']">
         <xsl:text xml:space="preserve">
# Protocol name: GI RG
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-GI RG
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1000	1000
	one		1000	3000
	header		5000	3000
	ptrail		1000
	gap		60000
	frequency	37300
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'gi rg']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-gi-rg">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0, false(), false(), $S, 2, 0, false(), false(), $D, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='gi rg']">
         <xsl:call-template name="command-gi-rg">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Grundig16 omitted: not one of the simple types (pwm2, pwm4, biphase).-->

      <!-- Protocol Grundig16-30 omitted: not one of the simple types (pwm2, pwm4, biphase).-->

      <!-- ################## Protocol GuangZhou ################ -->
      <!-- IRP:{38.0k,182}<3,-3|3,-6>(20,-10,T:2,D:6,F:8,S:8,20,-10,~T:2,D:6,~F:8,3,^108m,(20,-20,3,^108m)*){T=3}
            [D:0..63,F:0..255,S:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'guangzhou']">
         <xsl:text xml:space="preserve">
# Protocol name: GuangZhou
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-GuangZhou
	bits		40
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		546	546
	one		546	1092
	header		3640	1820
	ptrail		546
	repeat		3640	3640
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'guangzhou']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-guangzhou">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="S"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $T, 2, 0, false(), true(), $D, 6, 0, false(), true(), $F, 8, 0, false(), true(), $S, 8, 0, true(), true(), $T, 2, 0, false(), true(), $D, 6, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='guangzhou']">
         <xsl:call-template name="command-guangzhou">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="T" select="number(3)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol GwtS omitted: not one of the simple types (pwm2, pwm4, biphase).-->

      <!-- Protocol GXB omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Humax 4Phase omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- ################## Protocol InterVideo RC-201 ################ -->
      <!-- IRP:{38k,300}<1,-1|1,-3>(10,-5,0:1,F:6,768:10,1,-10m)* [F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'intervideo rc-201']">
         <xsl:text xml:space="preserve">
# Protocol name: InterVideo RC-201
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-InterVideo RC-201
	bits		17
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		300	300
	one		300	900
	header		3000	1500
	ptrail		300
	gap		10000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'intervideo rc-201']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-intervideo-rc-201">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 0, 1, 0, false(), true(), $F, 6, 0, false(), true(), 768, 10, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='intervideo rc-201']">
         <xsl:call-template name="command-intervideo-rc-201">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol IODATAn omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Jerrold ################ -->
      <!-- IRP:{0k,44}<1,-7.5m|1,-11.5m>(F:5,1,-23.5m)* [F:0..31] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jerrold']">
         <xsl:text xml:space="preserve">
# Protocol name: Jerrold
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Jerrold
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		44	7500
	one		44	11500
	ptrail		44
	gap		23500
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jerrold']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-jerrold">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='jerrold']">
         <xsl:call-template name="command-jerrold">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol JVC ################ -->
      <!-- IRP:{37.9k,527,33%}<1,-1|1,-3>(16,-8,D:8,F:8,1,^59.08m,(D:8,F:8,1,^46.42m)*) [D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jvc']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: JVC
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-JVC
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		527	527
	one		527	1581
	header		8432	4216
	ptrail		527
	gap		59000
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jvc']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-jvc">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='jvc']">
         <xsl:call-template name="command-jvc">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol JVC-48 omitted: Expressions as bitfields not implemented yet.-->

      <!-- Protocol JVC-56 omitted: Expressions as bitfields not implemented yet.-->

      <!-- ################## Protocol JVC_squashed ################ -->
      <!-- IRP:{37.9k,527,33%}<1,-1|1,-3>(16,-8,(D:8,F:8,1,^46.42m)*) [D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jvc_squashed']">
         <xsl:text xml:space="preserve">
# Protocol name: JVC_squashed
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-JVC_squashed
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		527	527
	one		527	1581
	header		8432	4216
	gap		4216
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jvc_squashed']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-jvc_squashed">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>

      <!-- ################## Protocol JVC{2} ################ -->
      <!-- IRP:{37.9k,527,33%}<1,-1|1,-3>(D:8,F:8,1,^46.42m)* [D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jvc{2}']">
         <xsl:text xml:space="preserve">
# Protocol name: JVC{2}
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-JVC{2}
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		527	527
	one		527	1581
	ptrail		527
	gap		46000
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'jvc{2}']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-jvc-2-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='jvc{2}']">
         <xsl:call-template name="command-jvc-2-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Kaseikyo omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Kaseikyo56 omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Kathrein ################ -->
      <!-- IRP:{38k,540}<1,-1|1,-3>(16,-8,D:4,~D:4,F:8,~F:8,1,^105m,(16,-8,F:8,1,^105m)+)[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'kathrein']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Kathrein
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Kathrein
	bits		32
	flags		SPACE_ENC|CONST_LENGTH|CONST_LENGTH
	eps		30
	aeps		100
	zero		540	540
	one		540	1620
	header		8640	4320
	ptrail		540
	gap		105000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'kathrein']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-kathrein">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, true(), true(), $D, 4, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='kathrein']">
         <xsl:call-template name="command-kathrein">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Keeprite omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Konka ################ -->
      <!-- IRP:{38k,500,msb}<1,-3|1,-5>(6,-6,D:8,F:8,1,-8,1,-46)* [D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'konka']">
         <xsl:text xml:space="preserve">
# Protocol name: Konka
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Konka
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		500	1500
	one		500	2500
	header		3000	3000
	ptrail		500
	gap		23000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'konka']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-konka">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='konka']">
         <xsl:call-template name="command-konka">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Logitech ################ -->
      <!-- IRP:{38k,127}<3,-4|3,-8>(31,-36,D:4,~D:4,F:8,~F:8,3,-50m)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'logitech']">
         <xsl:text xml:space="preserve">
# Protocol name: Logitech
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Logitech
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		381	508
	one		381	1016
	header		3937	4572
	ptrail		381
	gap		50000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'logitech']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-logitech">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, true(), true(), $D, 4, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='logitech']">
         <xsl:call-template name="command-logitech">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Lumagen omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Lutron omitted: not one of the simple types (pwm2, pwm4, biphase).-->

      <!-- ################## Protocol Matsui ################ -->
      <!-- IRP:{38k,525}<1,-1|1,-3>(D:3,F:7,1,^30.5m)* [D:0..7,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'matsui']">
         <xsl:text xml:space="preserve">
# Protocol name: Matsui
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Matsui
	bits		10
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		525	525
	one		525	1575
	ptrail		525
	gap		30500
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'matsui']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-matsui">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 3, 0, false(), true(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='matsui']">
         <xsl:call-template name="command-matsui">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol MCE omitted: Interleaved bitfields and durations.-->

      <!-- Protocol MCIR-2-kbd omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol MCIR-2-mouse ################ -->
      <!-- IRP:{300,msb}<-1,1|1,-1>(9,8:8,C:5,y:7,x:7,R:1,L:1,F:5,-10.7m)*
[C:0..31,L:0..1,R:0..1,x:0..127,y:0..127,F:0..31] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'mcir-2-mouse']">
         <xsl:text xml:space="preserve">
# Protocol name: MCIR-2-mouse
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-MCIR-2-mouse
	bits		34
	flags		RC5
	eps		30
	aeps		100
	zero		300	300
	one		300	300
	plead		2700
	gap		10700
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'mcir-2-mouse']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-mcir-2-mouse">
         <xsl:param name="C"/>
         <xsl:param name="L"/>
         <xsl:param name="R"/>
         <xsl:param name="x"/>
         <xsl:param name="y"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 8, 8, 0, false(), false(), $C, 5, 0, false(), false(), $y, 7, 0, false(), false(), $x, 7, 0, false(), false(), $R, 1, 0, false(), false(), $L, 1, 0, false(), false(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='mcir-2-mouse']">
         <xsl:call-template name="command-mcir-2-mouse">
            <xsl:with-param name="C"
                            select="number(girr:parameters/girr:parameter[@name='C']/@value)"/>
            <xsl:with-param name="L"
                            select="number(girr:parameters/girr:parameter[@name='L']/@value)"/>
            <xsl:with-param name="R"
                            select="number(girr:parameters/girr:parameter[@name='R']/@value)"/>
            <xsl:with-param name="x"
                            select="number(girr:parameters/girr:parameter[@name='x']/@value)"/>
            <xsl:with-param name="y"
                            select="number(girr:parameters/girr:parameter[@name='y']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Metz19 ################ -->
      <!-- IRP:{37.9k,106,msb}<4,-9|4,-16>((8,-22,T:1,D:3,~D:3,F:6,~F:6,4,-125m)*,T=1-T)[D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'metz19']">
         <xsl:text xml:space="preserve">
# Protocol name: Metz19
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Metz19
	bits		19
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		424	954
	one		424	1696
	header		848	2332
	ptrail		424
	gap		125000
	toggle_bit	1
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'metz19']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-metz19">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, true(), false(), $D, 3, 0, false(), false(), $F, 6, 0, true(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='metz19']">
         <xsl:call-template name="command-metz19">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='metz19' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-metz19">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Mitsubishi ################ -->
      <!-- IRP:{32.6k,300}<1,-3|1,-7>(D:8,F:8,1,-80)* [D:0..127,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'mitsubishi']">
         <xsl:text xml:space="preserve">
# Protocol name: Mitsubishi
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Mitsubishi
	bits		16
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		300	900
	one		300	2100
	ptrail		300
	gap		24000
	frequency	32600
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'mitsubishi']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-mitsubishi">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='mitsubishi']">
         <xsl:call-template name="command-mitsubishi">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Mitsubishi-K omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol NEC ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m) [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec']">
         <xsl:call-template name="command-nec">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC-f16 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,E:8,1,^108m) [D:0..255,S:0..255=255-D,F:0..255,E:0..255=255-F] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec-f16']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC-f16
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC-f16
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec-f16']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec-f16']">
         <xsl:call-template name="command-nec-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec-f16' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-nec-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol NEC-Shirriff omitted: Variable number of bits.-->

      <!-- ################## Protocol NEC-Shirriff-32 ################ -->
      <!-- IRP:{38.4k,msb,564}<1,-1|1,-3>(16,-8,data:32,1,^108m) [data:0..UINT32_MAX] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec-shirriff-32']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC-Shirriff-32
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC-Shirriff-32
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec-shirriff-32']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec-shirriff-32">
         <xsl:param name="data"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $data, 32, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec-shirriff-32']">
         <xsl:call-template name="command-nec-shirriff-32">
            <xsl:with-param name="data"
                            select="number(girr:parameters/girr:parameter[@name='data']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol NEC-Yamaha omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol NEC1 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m,(16,-4,1,^108m)*) [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC1
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC1
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec1">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec1']">
         <xsl:call-template name="command-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec1' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC1-f16 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,E:8,1,^108m,(16,-4,1,^108m)*) [D:0..255,S:0..255=255-D,F:0..255,E:0..255=255-F] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1-f16']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC1-f16
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC1-f16
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1-f16']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec1-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec1-f16']">
         <xsl:call-template name="command-nec1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec1-f16' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-nec1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC1-rnc ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:4:4,~F:4,1,^108m,(16,-4,1,^108m)*) [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1-rnc']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC1-rnc
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC1-rnc
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec1-rnc']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec1-rnc">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 4, 4, true(), true(), $F, 4, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec1-rnc']">
         <xsl:call-template name="command-nec1-rnc">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec1-rnc' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec1-rnc">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol NEC1-Yamaha omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol NEC2 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m)* [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec2']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC2
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC2
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec2']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec2']">
         <xsl:call-template name="command-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec2' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-nec2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NEC2-f16 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,E:8,1,^108m)* [D:0..255,S:0..255=255-D,F:0..255,E:0..255=255-F] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec2-f16']">
         <xsl:text xml:space="preserve">
# Protocol name: NEC2-f16
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NEC2-f16
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nec2-f16']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nec2-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec2-f16']">
         <xsl:call-template name="command-nec2-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nec2-f16' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-nec2-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx-f16 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,E:8,1,^108m) [D:0..255,S:0..255=255-D,F:0..255,E:0..255=255-F] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx-f16']">
         <xsl:text xml:space="preserve">
# Protocol name: NECx-f16
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NECx-f16
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx-f16']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx-f16']">
         <xsl:call-template name="command-necx-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx-f16' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-necx-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx1 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,~F:8,1,^108m,(8,-8,~D:1,1,^108m)*) [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx1']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: NECx1
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NECx1
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx1']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx1">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx1']">
         <xsl:call-template name="command-necx1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx1']">
         <xsl:call-template name="command-necx1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx1' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-necx1">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx1-f16 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,E:8,1,^108m,(8,-8,~D:1,1,^108m)*) [D:0..255,S:0..255=255-D,F:0..255,E:0..255=255-F] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx1-f16']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: NECx1-f16
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NECx1-f16
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx1-f16']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx1-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx1-f16']">
         <xsl:call-template name="command-necx1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx1-f16']">
         <xsl:call-template name="command-necx1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx1-f16' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-necx1-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx2 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,~F:8,1,^108m)* [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx2']">
         <xsl:text xml:space="preserve">
# Protocol name: NECx2
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NECx2
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx2']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx2">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx2']">
         <xsl:call-template name="command-necx2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx2' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-necx2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol NECx2-f16 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(8,-8,D:8,S:8,F:8,E:8,1,^108m)* [D:0..255,S:0..255=255-D,F:0..255,E:0..255=255-F] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx2-f16']">
         <xsl:text xml:space="preserve">
# Protocol name: NECx2-f16
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-NECx2-f16
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		108000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'necx2-f16']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-necx2-f16">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $E, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx2-f16']">
         <xsl:call-template name="command-necx2-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='necx2-f16' and girr:parameters/girr:parameter[@name='S'] and girr:parameters/girr:parameter[@name='E']]">
         <xsl:call-template name="command-necx2-f16">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Nokia ################ -->
      <!-- IRP:{36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>(15,-10,D:8,S:8,F:8,6,^100m)* [D:0..255,S:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nokia']">
         <xsl:text xml:space="preserve">
# Protocol name: Nokia
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Nokia
	bits		24
	flags		RCMM|CONST_LENGTH
	eps		4
	aeps		100
	zero		168	280
	one		168	448
	two		168	616
	three		168	784
	header		420	280
	ptrail		168
	gap		100000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nokia']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nokia">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nokia']">
         <xsl:call-template name="command-nokia">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Nokia12 ################ -->
      <!-- IRP:{36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>(15,-10,D:4,F:8,6,^100m)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nokia12']">
         <xsl:text xml:space="preserve">
# Protocol name: Nokia12
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Nokia12
	bits		12
	flags		RCMM|CONST_LENGTH
	eps		4
	aeps		100
	zero		168	280
	one		168	448
	two		168	616
	three		168	784
	header		420	280
	ptrail		168
	gap		100000
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nokia12']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nokia12">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nokia12']">
         <xsl:call-template name="command-nokia12">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Nokia32 ################ -->
      <!-- IRP:{36k,1p,msb}<6,-10|6,-16|6,-22|6,-28>((15,-10,D:8,S:8,T:1,X:7,F:8,6,^100m)*,T=1-T) [D:0..255,S:0..255,F:0..255,T@:0..1=0,X:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nokia32']">
         <xsl:text xml:space="preserve">
# Protocol name: Nokia32
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Nokia32
	bits		32
	flags		RCMM|CONST_LENGTH
	eps		4
	aeps		50
	zero		168	280
	one		168	448
	two		168	616
	three		168	784
	header		420	280
	ptrail		168
	gap		100000
	toggle_bit	17
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nokia32']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nokia32">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:param name="X"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 8, 0, false(), false(), $S, 8, 0, false(), false(), $T, 1, 0, false(), false(), $X, 7, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nokia32']">
         <xsl:call-template name="command-nokia32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
            <xsl:with-param name="X"
                            select="number(girr:parameters/girr:parameter[@name='X']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nokia32' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-nokia32">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
            <xsl:with-param name="X"
                            select="number(girr:parameters/girr:parameter[@name='X']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Nokia32_endframe omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- ################## Protocol Nova Pace ################ -->
      <!-- IRP:{38k, 300, msb}<-1,1|1,-1>((1,-1,D:10, S:8, F:8, T:1, -1, 1,-82m)*,T=1-T)
            [D:0..1023,S:0..255,F:0..255,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nova pace']">
         <xsl:text xml:space="preserve">
# Protocol name: Nova Pace
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Nova Pace
	bits		27
	flags		RC5
	eps		30
	aeps		100
	zero		300	300
	one		300	300
	header		300	300
	ptrail		300
	gap		82000
	toggle_bit	27
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'nova pace']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-nova-pace">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 10, 0, false(), false(), $S, 8, 0, false(), false(), $F, 8, 0, false(), false(), $T, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nova pace']">
         <xsl:call-template name="command-nova-pace">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='nova pace' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-nova-pace">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol NRC16 omitted: Interleaved bitfields and durations.-->

      <!-- Protocol NRC16-32 omitted: Interleaved bitfields and durations.-->

      <!-- Protocol NRC17 omitted: Interleaved bitfields and durations.-->

      <!-- ################## Protocol Ortek_NEClike ################ -->
      <!-- IRP:{40.0k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,F:4:4,~F:4,1,^108m,(16,-4,1,-3,1,^108m)*)[D:0..255,S:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'ortek_neclike']">
         <xsl:text xml:space="preserve">
# Protocol name: Ortek_NEClike
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Ortek_NEClike
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		108000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'ortek_neclike']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-ortek_neclike">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $F, 4, 4, true(), true(), $F, 4, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='ortek_neclike']">
         <xsl:call-template name="command-ortek_neclike">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol OrtekMCE omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol OrtekMCE_relaxed omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol PaceMSS ################ -->
      <!-- IRP:{38k,630,msb}<1,-7|1,-11>(1,-5,1,-5,T:1,D:1,F:8,1,^120m)* [D:0..1,F:0..255,T:0..1] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pacemss']">
         <xsl:text xml:space="preserve">
# Protocol name: PaceMSS
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-PaceMSS
	bits		10
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		630	4410
	one		630	6930
	header		630	3150
	plead		630
	ptrail		630
	gap		120000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pacemss']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pacemss">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $T, 1, 0, false(), false(), $D, 1, 0, false(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pacemss']">
         <xsl:call-template name="command-pacemss">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Panasonic omitted: Expressions as bitfields not implemented yet.-->

      <!-- Protocol Panasonic2 omitted: Expressions as bitfields not implemented yet.-->

      <!-- ################## Protocol Panasonic_Old ################ -->
      <!-- IRP:{57.6k,833}<1,-1|1,-3>(4,-4,D:5,F:6,~D:5,~F:6,1,-44m)* [D:0..31,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'panasonic_old']">
         <xsl:text xml:space="preserve">
# Protocol name: Panasonic_Old
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Panasonic_Old
	bits		22
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		833	833
	one		833	2499
	header		3332	3332
	ptrail		833
	gap		44000
	frequency	57600
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'panasonic_old']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-panasonic_old">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 6, 0, true(), true(), $D, 5, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='panasonic_old']">
         <xsl:call-template name="command-panasonic_old">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol PCTV omitted: not one of the simple types (pwm2, pwm4, biphase).-->

      <!-- ################## Protocol pid-0001 ################ -->
      <!-- IRP:{0k,msb}<24,-9314|24,-13486>(24,-21148,(F:5,1,-28m)+)[F:0..31] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pid-0001']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: pid-0001
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-pid-0001
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		24	9314
	one		24	13486
	header		24	21148
	ptrail		1
	gap		28000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pid-0001']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pid-0001">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pid-0001']">
         <xsl:call-template name="command-pid-0001">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol pid-0003 ################ -->
      <!-- IRP:{40.2k,389}<2,-2|3,-1>(F:8,~F:8,^102m)*[F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pid-0003']">
         <xsl:text xml:space="preserve">
# Protocol name: pid-0003
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-pid-0003
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		778	778
	one		1167	389
	gap		102000
	frequency	40200
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pid-0003']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pid-0003">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pid-0003']">
         <xsl:call-template name="command-pid-0003">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol pid-0004 ################ -->
      <!-- IRP:{0k,msb}<12,-130|12,-372>(F:6,12,-27m)*[F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pid-0004']">
         <xsl:text xml:space="preserve">
# Protocol name: pid-0004
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-pid-0004
	bits		6
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		12	130
	one		12	372
	ptrail		12
	gap		27000
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pid-0004']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pid-0004">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pid-0004']">
         <xsl:call-template name="command-pid-0004">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol pid-0083 omitted: not one of the simple types (pwm2, pwm4, biphase).-->

      <!-- ################## Protocol Pioneer ################ -->
      <!-- IRP:{40k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m)* [D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pioneer']">
         <xsl:text xml:space="preserve">
# Protocol name: Pioneer
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Pioneer
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pioneer']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pioneer">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pioneer']">
         <xsl:call-template name="command-pioneer">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pioneer' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-pioneer">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Pioneer-2Part ################ -->
      <!-- IRP:{40k,564}<1,-1|1,-3>(16,-8,D0:8,~D0:8,F0:8,~F0:8,1,^90m,(16,-8,D:8,~D:8,F:8,~F:8,1,^90m)+) [D0:0..255,F0:0..255,D:0..255=D0,F:0..255=F0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pioneer-2part']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Pioneer-2Part
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Pioneer-2Part
	bits		64
	flags		SPACE_ENC|CONST_LENGTH|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		90000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'pioneer-2part']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-pioneer-2part">
         <xsl:param name="D0"/>
         <xsl:param name="F0"/>
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D0, 8, 0, true(), true(), $D0, 8, 0, false(), true(), $F0, 8, 0, true(), true(), $F0, 8, 0, false(), true(), $D, 8, 0, true(), true(), $D, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pioneer-2part']">
         <xsl:call-template name="command-pioneer-2part">
            <xsl:with-param name="D0"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F0"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pioneer-2part']">
         <xsl:call-template name="command-pioneer-2part">
            <xsl:with-param name="D0"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F0"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='pioneer-2part' and girr:parameters/girr:parameter[@name='D'] and girr:parameters/girr:parameter[@name='F']]">
         <xsl:call-template name="command-pioneer-2part">
            <xsl:with-param name="D0"
                            select="number(girr:parameters/girr:parameter[@name='D0']/@value)"/>
            <xsl:with-param name="F0"
                            select="number(girr:parameters/girr:parameter[@name='F0']/@value)"/>
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Proton ################ -->
      <!-- IRP:{38.5k,500}<1,-1|1,-3>(16,-8,D:8,1,-8,F:8,1,^63m)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'proton']">
         <xsl:text xml:space="preserve">
# Protocol name: Proton
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Proton
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		8000	4000
	ptrail		500
	gap		63000
	frequency	38500
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'proton']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-proton">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='proton']">
         <xsl:call-template name="command-proton">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Proton-40 ################ -->
      <!-- IRP:{40.5k,500}<1,-1|1,-3>(16,-8,D:8,1,-8,F:8,1,^63m)*[D:0..255,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'proton-40']">
         <xsl:text xml:space="preserve">
# Protocol name: Proton-40
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Proton-40
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	500
	one		500	1500
	header		8000	4000
	ptrail		500
	gap		63000
	frequency	40500
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'proton-40']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-proton-40">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='proton-40']">
         <xsl:call-template name="command-proton-40">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5 ################ -->
      <!-- IRP:{36k,msb,889}<1,-1|-1,1>((1,~F:1:6,T:1,D:5,F:6,^114m)*,T=1-T)[D:0..31,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']">
         <xsl:text xml:space="preserve">
# Protocol name: RC5
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RC5
	bits		13
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $F, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rc5']">
         <xsl:call-template name="command-rc5">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rc5' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5-7F ################ -->
      <!-- IRP:{36k,msb,889}<1,-1|-1,1>((1, ~D:1:5,T:1,D:5,F:7,^114m)*,T=1-T) [D:0..63,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5-7f']">
         <xsl:text xml:space="preserve">
# Protocol name: RC5-7F
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RC5-7F
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5-7f']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5-7f">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $D, 1, 5, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rc5-7f']">
         <xsl:call-template name="command-rc5-7f">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rc5-7f' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5-7f">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RC5-7F-57 ################ -->
      <!-- IRP:{57k,msb,889}<1,-1|-1,1>(1, ~D:1:5,T:1,D:5,F:7,^114m)*[D:0..63,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5-7f-57']">
         <xsl:text xml:space="preserve">
# Protocol name: RC5-7F-57
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RC5-7F-57
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	57000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rc5-7f-57']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rc5-7f-57">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $D, 1, 5, false(), false(), $T, 1, 0, false(), false(), $D, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rc5-7f-57']">
         <xsl:call-template name="command-rc5-7f-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rc5-7f-57' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-rc5-7f-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol RC5x omitted: Interleaved bitfields and durations.-->

      <!-- Protocol RC6 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol RC6-6-20 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol RC6-M-16 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol RC6-M-24 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol RC6-M-28 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol RC6-M-32 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol RC6-M-56 omitted: Hierarchical BitspecIrStreams.-->

      <!-- ################## Protocol RCA ################ -->
      <!-- IRP:{58k,460,msb}<1,-2|1,-4>(8,-8,D:4,F:8,~D:4,~F:8,1,-16)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca']">
         <xsl:text xml:space="preserve">
# Protocol name: RCA
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RCA
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		3680	3680
	ptrail		460
	gap		7360
	frequency	58000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rca']">
         <xsl:call-template name="command-rca">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA(Old) ################ -->
      <!-- IRP:{58k,460,msb}<1,-2|1,-4>([40][8],-8,D:4,F:8,~D:4,~F:8,2,-16)+[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca(old)']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: RCA(Old)
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RCA(Old)
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		18400	3680
	ptrail		920
	gap		7360
	frequency	58000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca(old)']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca-old-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rca(old)']">
         <xsl:call-template name="command-rca-old-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA-38 ################ -->
      <!-- IRP:{38.7k,460,msb}<1,-2|1,-4>(8,-8,D:4,F:8,~D:4,~F:8,1,-16)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca-38']">
         <xsl:text xml:space="preserve">
# Protocol name: RCA-38
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RCA-38
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		3680	3680
	ptrail		460
	gap		7360
	frequency	38700
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca-38']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca-38">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rca-38']">
         <xsl:call-template name="command-rca-38">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RCA-38(Old) ################ -->
      <!-- IRP:{38.7k,460,msb}<1,-2|1,-4>([40][8],-8,D:4,F:8,~D:4,~F:8,2,-16)+[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca-38(old)']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: RCA-38(Old)
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RCA-38(Old)
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		460	920
	one		460	1840
	header		18400	3680
	ptrail		920
	gap		7360
	frequency	38700
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rca-38(old)']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-rca-38-old-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='rca-38(old)']">
         <xsl:call-template name="command-rca-38-old-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80 ################ -->
      <!-- IRP:{38k,158,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,-45m)* {}[D:0..7,F:0..63, T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80']">
         <xsl:text xml:space="preserve">
# Protocol name: RECS80
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RECS80
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		158	4898
	one		158	7426
	ptrail		158
	gap		45000
	toggle_bit	2
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80']">
         <xsl:call-template name="command-recs80">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80-0045 ################ -->
      <!-- IRP:{38k,158,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,-45m)* [D:0..7,F:0..63, T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80-0045']">
         <xsl:text xml:space="preserve">
# Protocol name: RECS80-0045
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RECS80-0045
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		158	4898
	one		158	7426
	ptrail		158
	gap		45000
	toggle_bit	2
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80-0045']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80-0045">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80-0045']">
         <xsl:call-template name="command-recs80-0045">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80-0045' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80-0045">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80-0068 ################ -->
      <!-- IRP:{33.3k,180,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,^138m)* [D:0..7,F:0..63, T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80-0068']">
         <xsl:text xml:space="preserve">
# Protocol name: RECS80-0068
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RECS80-0068
	bits		11
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		180	5580
	one		180	8460
	ptrail		180
	gap		138000
	toggle_bit	2
	frequency	33300
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80-0068']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80-0068">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80-0068']">
         <xsl:call-template name="command-recs80-0068">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80-0068' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80-0068">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol RECS80-0090 ################ -->
      <!-- IRP:{0k,158,msb}<1,-31|1,-47>(1:1,T:1,D:3,F:6,1,^138m)* [D:0..7,F:0..63, T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80-0090']">
         <xsl:text xml:space="preserve">
# Protocol name: RECS80-0090
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-RECS80-0090
	bits		11
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		158	4898
	one		158	7426
	ptrail		158
	gap		138000
	toggle_bit	2
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'recs80-0090']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-recs80-0090">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80-0090']">
         <xsl:call-template name="command-recs80-0090">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='recs80-0090' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-recs80-0090">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Replay omitted: Hierarchical BitspecIrStreams.-->

      <!-- ################## Protocol Revox ################ -->
      <!-- IRP:{0k,15u}<1,-9|1,-19>(1,-29,0:1,D:4,F:6,1,-29,1,-100285u)*[D:0..15,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'revox']">
         <xsl:text xml:space="preserve">
# Protocol name: Revox
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Revox
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		15	135
	one		15	285
	header		15	435
	ptrail		15
	gap		100285
	frequency	0
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'revox']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-revox">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), 0, 1, 0, false(), true(), $D, 4, 0, false(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='revox']">
         <xsl:call-template name="command-revox">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Roku ################ -->
      <!-- IRP:{38.0k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:7,0:1,~F:7,1:1,1,^108m, (16,-8,D:8,S:8,F:7,1:1,~F:7,0:1,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'roku']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Roku
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Roku
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'roku']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-roku">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 7, 0, false(), true(), 0, 1, 0, true(), true(), $F, 7, 0, false(), true(), 1, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='roku']">
         <xsl:call-template name="command-roku">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='roku']">
         <xsl:call-template name="command-roku">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='roku' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-roku">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Roku-8bit ################ -->
      <!-- IRP:{38.0k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,~F:8,1,^108m, (16,-8,D:8,S:8,F:7,~F:1:7,~F:7,F:1:7,1,^108m)*)[D:0..255,S:0..255=255-D,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'roku-8bit']">
         <xsl:text># Warning: Protocol contains repeat elements that cannot be expressed in Lirc
</xsl:text>
         <xsl:text xml:space="preserve">
# Protocol name: Roku-8bit
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Roku-8bit
	bits		32
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	gap		108000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'roku-8bit']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-roku-8bit">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='roku-8bit']">
         <xsl:call-template name="command-roku-8bit">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='roku-8bit']">
         <xsl:call-template name="command-roku-8bit">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="(255)-(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='roku-8bit' and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-roku-8bit">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Rs200 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol RTI_Relay omitted: Too many bits (75 > 64)".-->

      <!-- Protocol RTI_Relay_alt omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Sampo ################ -->
      <!-- IRP:{38.4k, 833}<1,-1|1,-3>(4,-4,D:6,F:6,S:6,~F:6,1,-39)*[D:0..63,S:0..63,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sampo']">
         <xsl:text xml:space="preserve">
# Protocol name: Sampo
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sampo
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		833	833
	one		833	2499
	header		3332	3332
	ptrail		833
	gap		32487
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sampo']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sampo">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $F, 6, 0, false(), true(), $S, 6, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sampo']">
         <xsl:call-template name="command-sampo">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Samsung-SMT-G ################ -->
      <!-- IRP:{38.5k,497,msb}<1,-1|1,-3>(4497u,-4497u,D:16,1,-4497u,S:4,F:16,1,^120m)*[D:0..65335,S:0..15,F:0..65535] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'samsung-smt-g']">
         <xsl:text xml:space="preserve">
# Protocol name: Samsung-SMT-G
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Samsung-SMT-G
	bits		36
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		497	497
	one		497	1491
	header		4497	4497
	ptrail		497
	gap		120000
	frequency	38500
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'samsung-smt-g']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-samsung-smt-g">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 16, 0, false(), false(), $S, 4, 0, false(), false(), $F, 16, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='samsung-smt-g']">
         <xsl:call-template name="command-samsung-smt-g">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Samsung20 ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(8,-8,D:6,S:6,F:8,1,^100m)*[D:0..63,S:0..63,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'samsung20']">
         <xsl:text xml:space="preserve">
# Protocol name: Samsung20
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Samsung20
	bits		20
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		4512	4512
	ptrail		564
	gap		100000
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'samsung20']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-samsung20">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $S, 6, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='samsung20']">
         <xsl:call-template name="command-samsung20">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Samsung36 ################ -->
      <!-- IRP:{37.9k,560,33%}<1,-1|1,-3>(4500u,-4500u,D:8,S:8,1,-9,E:4,F:8,~F:8,1,^108m)*[D:0..255,S:0..255,F:0..255,E:0..15] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'samsung36']">
         <xsl:text xml:space="preserve">
# Protocol name: Samsung36
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Samsung36
	bits		36
	flags		SPACE_ENC|CONST_LENGTH
	eps		20
	aeps		100
	zero		560	560
	one		560	1680
	header		4500	4500
	ptrail		560
	gap		108000
	frequency	37900
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'samsung36']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-samsung36">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="E"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $E, 4, 0, false(), true(), $F, 8, 0, true(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='samsung36']">
         <xsl:call-template name="command-samsung36">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="E"
                            select="number(girr:parameters/girr:parameter[@name='E']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol ScAtl-6 ################ -->
      <!-- IRP:{57.6k,846}<1,-1|1,-3>(4,-4,D:6,F:6,~D:6,~F:6,1,-40)*[D:0..63,F:0..63] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'scatl-6']">
         <xsl:text xml:space="preserve">
# Protocol name: ScAtl-6
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-ScAtl-6
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		846	846
	one		846	2538
	header		3384	3384
	ptrail		846
	gap		33840
	frequency	57600
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'scatl-6']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-scatl-6">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 6, 0, false(), true(), $F, 6, 0, true(), true(), $D, 6, 0, true(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='scatl-6']">
         <xsl:call-template name="command-scatl-6">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Sejin-1-38 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol Sejin-1-56 omitted: Hierarchical BitspecIrStreams.-->

      <!-- ################## Protocol Sharp ################ -->
      <!-- IRP:{38k,264}<1,-3|1,-7>(D:5,F:8,1:2,1,-165,D:5,~F:8,2:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sharp']">
         <xsl:text xml:space="preserve">
# Protocol name: Sharp
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sharp
	bits		30
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sharp']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sharp">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 1, 2, 0, false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 2, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sharp']">
         <xsl:call-template name="command-sharp">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol SharpDVD omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Sharp{1} ################ -->
      <!-- IRP:{38k,264}<1,-3|1,-7>(D:5,F:8,1:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sharp{1}']">
         <xsl:text xml:space="preserve">
# Protocol name: Sharp{1}
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sharp{1}
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sharp{1}']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sharp-1-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, false(), true(), $F, 8, 0, false(), true(), 1, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sharp{1}']">
         <xsl:call-template name="command-sharp-1-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sharp{2} ################ -->
      <!-- IRP:{38k,264}<1,-3|1,-7>(D:5,~F:8,2:2,1,-165)*[D:0..31,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sharp{2}']">
         <xsl:text xml:space="preserve">
# Protocol name: Sharp{2}
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sharp{2}
	bits		15
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		264	792
	one		264	1848
	ptrail		264
	gap		43560
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sharp{2}']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sharp-2-">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 5, 0, true(), true(), $F, 8, 0, false(), true(), 2, 2, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sharp{2}']">
         <xsl:call-template name="command-sharp-2-">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol SIM2 ################ -->
      <!-- IRP:{38.8k,400}<3,-3|3,-7>(6,-7,D:8,F:8,3,^115m)[D:0..255=236,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sim2']">
         <xsl:text xml:space="preserve">
# Protocol name: SIM2
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-SIM2
	bits		16
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		1200	1200
	one		1200	2800
	header		2400	2800
	ptrail		1200
	gap		115000
	frequency	38800
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sim2']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sim2">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sim2']">
         <xsl:call-template name="command-sim2">
            <xsl:with-param name="D" select="236"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sim2' and girr:parameters/girr:parameter[@name='D']]">
         <xsl:call-template name="command-sim2">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Solidtek16 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Somfy omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Sony12 ################ -->
      <!-- IRP:{40k,600}<1,-1|2,-1>(4,-1,F:7,D:5,^45m)*[D:0..31,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony12']">
         <xsl:text xml:space="preserve">
# Protocol name: Sony12
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sony12
	bits		12
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony12']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony12">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 7, 0, false(), true(), $D, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sony12']">
         <xsl:call-template name="command-sony12">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sony15 ################ -->
      <!-- IRP:{40k,600}<1,-1|2,-1>(4,-1,F:7,D:8,^45m)*[D:0..255,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony15']">
         <xsl:text xml:space="preserve">
# Protocol name: Sony15
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sony15
	bits		15
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony15']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony15">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 7, 0, false(), true(), $D, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sony15']">
         <xsl:call-template name="command-sony15">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sony20 ################ -->
      <!-- IRP:{40k,600}<1,-1|2,-1>(4,-1,F:7,D:5,S:8,^45m)*[D:0..31,S:0..255,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony20']">
         <xsl:text xml:space="preserve">
# Protocol name: Sony20
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sony20
	bits		20
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony20']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony20">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 7, 0, false(), true(), $D, 5, 0, false(), true(), $S, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sony20']">
         <xsl:call-template name="command-sony20">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sony8 ################ -->
      <!-- IRP:{40k,600}<1,-1|2,-1>(4,-1,F:8,^45m)[F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony8']">
         <xsl:text xml:space="preserve">
# Protocol name: Sony8
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sony8
	bits		8
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		600	600
	one		1200	600
	header		2400	600
	gap		45000
	frequency	40000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sony8']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sony8">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sony8']">
         <xsl:call-template name="command-sony8">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol SonyDSP omitted: Expressions as bitfields not implemented yet.-->

      <!-- Protocol SonyDSP_relaxed omitted: Expressions as bitfields not implemented yet.-->

      <!-- ################## Protocol StreamZap ################ -->
      <!-- IRP:{36k,msb,889}<1,-1|-1,1>(1,~F:1:6,T:1,D:6,F:6,^114m)*[D:0..63,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'streamzap']">
         <xsl:text xml:space="preserve">
# Protocol name: StreamZap
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-StreamZap
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	36000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'streamzap']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-streamzap">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $F, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='streamzap']">
         <xsl:call-template name="command-streamzap">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='streamzap' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-streamzap">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol StreamZap-57 ################ -->
      <!-- IRP:{57k,msb,889}<1,-1|-1,1>(1,~F:1:6,T:1,D:6,F:6,^114m)*[D:0..63,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'streamzap-57']">
         <xsl:text xml:space="preserve">
# Protocol name: StreamZap-57
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-StreamZap-57
	bits		14
	flags		RC5|CONST_LENGTH
	eps		30
	aeps		100
	zero		889	889
	one		889	889
	plead		889
	gap		114000
	toggle_bit	2
	frequency	57000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'streamzap-57']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-streamzap-57">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), false(), $F, 1, 6, false(), false(), $T, 1, 0, false(), false(), $D, 6, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='streamzap-57']">
         <xsl:call-template name="command-streamzap-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='streamzap-57' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-streamzap-57">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Sunfire ################ -->
      <!-- IRP:{38k,560,msb}<1,-1|3,-1>(16,-8, D:4,F:8,~D:4,~F:8, -32)*[D:0..15,F:0..255] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sunfire']">
         <xsl:text xml:space="preserve">
# Protocol name: Sunfire
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Sunfire
	bits		24
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		560	560
	one		1680	560
	header		8960	4480
	gap		17920
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'sunfire']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-sunfire">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 4, 0, false(), false(), $F, 8, 0, true(), false(), $D, 4, 0, true(), false(), $F, 8, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='sunfire']">
         <xsl:call-template name="command-sunfire">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol TCL_AC omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol TDC-38 ################ -->
      <!-- IRP:{38k,315,msb}<-1,1|1,-1>(1,-1,D:5,S:5,F:7,-89m)*[D:0..31,S:0..31,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'tdc-38']">
         <xsl:text xml:space="preserve">
# Protocol name: TDC-38
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-TDC-38
	bits		17
	flags		RC5
	eps		30
	aeps		100
	zero		315	315
	one		315	315
	header		315	315
	gap		89000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'tdc-38']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-tdc-38">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 5, 0, false(), false(), $S, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='tdc-38']">
         <xsl:call-template name="command-tdc-38">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol TDC-56 ################ -->
      <!-- IRP:{56.3k,213,msb}<-1,1|1,-1>(1,-1,D:5,S:5,F:7,-89m)*[D:0..31,S:0..31,F:0..127] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'tdc-56']">
         <xsl:text xml:space="preserve">
# Protocol name: TDC-56
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-TDC-56
	bits		17
	flags		RC5
	eps		30
	aeps		100
	zero		213	213
	one		213	213
	header		213	213
	gap		89000
	frequency	56300
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'tdc-56']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-tdc-56">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), $D, 5, 0, false(), false(), $S, 5, 0, false(), false(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='tdc-56']">
         <xsl:call-template name="command-tdc-56">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Teac-K omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Thomson ################ -->
      <!-- IRP:{33k,500}<1,-4|1,-9>((D:4,T:1,D:1:4,F:6,1,^80m)*,T=1-T)[D:0..31,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'thomson']">
         <xsl:text xml:space="preserve">
# Protocol name: Thomson
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Thomson
	bits		12
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	2000
	one		500	4500
	ptrail		500
	gap		80000
	toggle_bit	5
	frequency	33000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'thomson']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-thomson">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, false(), true(), $T, 1, 0, false(), true(), $D, 1, 4, false(), true(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='thomson']">
         <xsl:call-template name="command-thomson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='thomson' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-thomson">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Thomson7 ################ -->
      <!-- IRP:{33k,500}<1,-4|1,-9>((D:4,T:1,F:7,1,^80m)*,T=1-T) [D:0..15,F:0..127,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'thomson7']">
         <xsl:text xml:space="preserve">
# Protocol name: Thomson7
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Thomson7
	bits		12
	flags		SPACE_ENC|CONST_LENGTH
	eps		30
	aeps		100
	zero		500	2000
	one		500	4500
	ptrail		500
	gap		80000
	toggle_bit	5
	frequency	33000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'thomson7']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-thomson7">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, false(), true(), $T, 1, 0, false(), true(), $F, 7, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='thomson7']">
         <xsl:call-template name="command-thomson7">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='thomson7' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-thomson7">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Tivo ################ -->
      <!-- IRP:{38.4k,564}<1,-1|1,-3>(16,-8,D:8,S:8,F:8,U:4,~F:4:4,1,-78,(16,-4,1,-173)*) [D:133..133=133,S:48..48=48,F:0..255,U:0..15] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'tivo']">
         <xsl:text xml:space="preserve">
# Protocol name: Tivo
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Tivo
	bits		32
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		564	564
	one		564	1692
	header		9024	4512
	ptrail		564
	repeat		9024	2256
	gap		43992
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'tivo']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-tivo">
         <xsl:param name="D"/>
         <xsl:param name="S"/>
         <xsl:param name="F"/>
         <xsl:param name="U"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 8, 0, false(), true(), $S, 8, 0, false(), true(), $F, 8, 0, false(), true(), $U, 4, 0, true(), true(), $F, 4, 4)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='tivo']">
         <xsl:call-template name="command-tivo">
            <xsl:with-param name="D" select="133"/>
            <xsl:with-param name="S" select="48"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="U"
                            select="number(girr:parameters/girr:parameter[@name='U']/@value)"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='tivo' and girr:parameters/girr:parameter[@name='D'] and girr:parameters/girr:parameter[@name='S']]">
         <xsl:call-template name="command-tivo">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="S"
                            select="number(girr:parameters/girr:parameter[@name='S']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="U"
                            select="number(girr:parameters/girr:parameter[@name='U']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Velleman ################ -->
      <!-- IRP:{38k,msb}<700,-5060|700,-7590>(1:1,T:1,D:3,F:6,700,-55m)* [D:0..7,F:0..63,T@:0..1=0] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'velleman']">
         <xsl:text xml:space="preserve">
# Protocol name: Velleman
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Velleman
	bits		11
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		700	5060
	one		700	7590
	ptrail		700
	gap		55000
	toggle_bit	2
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'velleman']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-velleman">
         <xsl:param name="D"/>
         <xsl:param name="F"/>
         <xsl:param name="T"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 1, 1, 0, false(), false(), $T, 1, 0, false(), false(), $D, 3, 0, false(), false(), $F, 6, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version with defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='velleman']">
         <xsl:call-template name="command-velleman">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T" select="0"/>
         </xsl:call-template>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='velleman' and girr:parameters/girr:parameter[@name='T']]">
         <xsl:call-template name="command-velleman">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
            <xsl:with-param name="T"
                            select="number(girr:parameters/girr:parameter[@name='T']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol Velodyne omitted: Non-constant definitions not yet implemented.-->

      <!-- ################## Protocol Viewstar ################ -->
      <!-- IRP:{50.5k,337}<1,-8|1,-5>(~F:5,1,-17)*[F:0..31] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'viewstar']">
         <xsl:text xml:space="preserve">
# Protocol name: Viewstar
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Viewstar
	bits		5
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		337	2696
	one		337	1685
	ptrail		337
	gap		5729
	frequency	50500
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'viewstar']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-viewstar">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(true(), true(), $F, 5, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='viewstar']">
         <xsl:call-template name="command-viewstar">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol Whynter ################ -->
      <!-- IRP:{38k,750,msb}<1,-1|1,-3>(0:1,4,-4,F:32,1,-50m)[F:0..0xFFFFFFFF] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'whynter']">
         <xsl:text xml:space="preserve">
# Protocol name: Whynter
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-Whynter
	bits		33
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		750	750
	one		750	2250
	ptrail		750
	gap		50000
	frequency	38000
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'whynter']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-whynter">
         <xsl:param name="F"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), false(), 0, 1, 0, false(), false(), $F, 32, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='whynter']">
         <xsl:call-template name="command-whynter">
            <xsl:with-param name="F"
                            select="number(girr:parameters/girr:parameter[@name='F']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol X10-command ################ -->
      <!-- IRP:{38.4k,570}<2,-12|7,-7>(7,-7,C:4,1:1,~C:4,0:1,21,-7)*[C:0..15] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'x10-command']">
         <xsl:text xml:space="preserve">
# Protocol name: X10-command
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-X10-command
	bits		10
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1140	6840
	one		3990	3990
	header		3990	3990
	ptrail		11970
	gap		3990
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'x10-command']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-x10-command">
         <xsl:param name="C"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $C, 4, 0, false(), true(), 1, 1, 0, true(), true(), $C, 4, 0, false(), true(), 0, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='x10-command']">
         <xsl:call-template name="command-x10-command">
            <xsl:with-param name="C"
                            select="number(girr:parameters/girr:parameter[@name='C']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol X10-device ################ -->
      <!-- IRP:{38.4k,570}<2,-12|7,-7>(7,-7,D:4,0:1,~D:4,1:1,21,-7)*[D:0..15] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'x10-device']">
         <xsl:text xml:space="preserve">
# Protocol name: X10-device
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-X10-device
	bits		10
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1140	6840
	one		3990	3990
	header		3990	3990
	ptrail		11970
	gap		3990
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'x10-device']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-x10-device">
         <xsl:param name="D"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $D, 4, 0, false(), true(), 0, 1, 0, true(), true(), $D, 4, 0, false(), true(), 1, 1, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='x10-device']">
         <xsl:call-template name="command-x10-device">
            <xsl:with-param name="D"
                            select="number(girr:parameters/girr:parameter[@name='D']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- ################## Protocol X10-house ################ -->
      <!-- IRP:{38.4k,570}<2,-12|7,-7>(7,-7,H:4,~H:4,21,-7)*[H:0..15] -->
      <xsl:template match="girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'x10-house']">
         <xsl:text xml:space="preserve">
# Protocol name: X10-house
begin remote
	name		</xsl:text>
         <xsl:value-of select="translate(../../../@name, ' ', '_')"/>
         <xsl:text>-X10-house
	bits		8
	flags		SPACE_ENC
	eps		30
	aeps		100
	zero		1140	6840
	one		3990	3990
	header		3990	3990
	ptrail		11970
	gap		3990
	frequency	38400
	begin codes
</xsl:text>
         <xsl:apply-templates select="/*//girr:command[girr:parameters[translate(@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'x10-house']]"/>
         <xsl:text>	end codes
end remote
</xsl:text>
      </xsl:template>
      <xsl:template name="command-x10-house">
         <xsl:param name="H"/>
         <xsl:text xml:space="preserve">		</xsl:text>
         <xsl:value-of select="translate(@name, ' ', '_')"/>
         <xsl:text>	0x</xsl:text>
         <xsl:value-of select="exporterutils:processBitFields(false(), true(), $H, 4, 0, true(), true(), $H, 4, 0)"/>
         <xsl:text xml:space="preserve">
</xsl:text>
      </xsl:template>
      <!-- Version without defaults -->
      <xsl:template match="girr:command[translate(girr:parameters/@protocol, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='x10-house']">
         <xsl:call-template name="command-x10-house">
            <xsl:with-param name="H"
                            select="number(girr:parameters/girr:parameter[@name='H']/@value)"/>
         </xsl:call-template>
      </xsl:template>

      <!-- Protocol X10.n omitted: Assignment cannot be done in the Lirc framework.-->

      <!-- Protocol Xiaomi omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol XMP omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol XMP-1 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol XMP-2 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol XMPff omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol XMPff-1 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol XMPff-2 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Zaptor-36 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Zaptor-56 omitted: Non-constant definitions not yet implemented.-->

      <!-- Protocol Zenith omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol Zenith5 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol Zenith6 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol Zenith7 omitted: Hierarchical BitspecIrStreams.-->

      <!-- Protocol Zenith8 omitted: Hierarchical BitspecIrStreams.-->   </xsl:stylesheet>
</exportformats:exportformat>
