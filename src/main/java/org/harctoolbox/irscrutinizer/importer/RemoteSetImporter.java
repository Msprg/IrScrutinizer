/*
Copyright (C) 2013 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

package org.harctoolbox.irscrutinizer.importer;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.harctoolbox.girr.CommandSet;
import org.harctoolbox.girr.Remote;
import org.harctoolbox.girr.RemoteSet;
import org.harctoolbox.ircore.IrCoreUtils;
import org.harctoolbox.irscrutinizer.Version;

/**
 * This class does something interesting and useful. Or not...
 */
public abstract class RemoteSetImporter extends ReaderImporter implements IRemoteSetImporter {

    protected static boolean hasCommands(Remote remote) {
        for (CommandSet commandSet : remote)
            if (!commandSet.isEmpty())
                return true;
        return false;
    }

    protected RemoteSet remoteSet;

    protected RemoteSetImporter() {
        super();
    }

    @Override
    public RemoteSet getRemoteSet() {
        return remoteSet;
    }

    @Override
    // Default, dumb, implementation
    public Remote.MetaData getMetaData() {
        return new Remote.MetaData();
    }

    protected Remote setupRemote() {

        Map<String, Map<String, String>> appParams = new HashMap<>(8);
        appParams.put(getClass().getSimpleName(), null);
        Remote.MetaData metaData =new Remote.MetaData(IrCoreUtils.basename(origin));
        return new Remote(metaData,
                null, //String comment,
                null,
                getCommandIndex(),
                appParams);
    }

    protected void setupRemoteSet(Remote remote) {
        Map<String, String> notes = new HashMap<>(1);
        notes.put("notes", "Generated by " + getClass().getCanonicalName());
        remoteSet = new RemoteSet(getCreatingUser(),
                origin, //java.lang.String source,
                (new Date()).toString(), //java.lang.String creationDate,
                Version.appName, //java.lang.String tool,
                Version.version, //java.lang.String toolVersion,
                org.harctoolbox.irp.Version.appName, //java.lang.String tool2,
                org.harctoolbox.irp.Version.version, //java.lang.String tool2Version,
                notes, //java.lang.String notes,
                remote);
    }

    protected void setupRemoteSet() {
        setupRemoteSet(setupRemote());
    }

    protected void setupCommands() {
        clearCommands();
        if (remoteSet == null)
            return;

        for (Remote remote : remoteSet)
            for (CommandSet commandSet : remote)
                addCommands(commandSet.getCommands());

    }
}
